
ADC_ESTETO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006034  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080061fc  080061fc  000071fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800621c  0800621c  00008334  2**0
                  CONTENTS
  4 .ARM          00000008  0800621c  0800621c  0000721c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006224  08006224  00008334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006224  08006224  00007224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006228  08006228  00007228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000334  20000000  0800622c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd4  20000334  08006560  00008334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f08  08006560  00008f08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008334  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cd9  00000000  00000000  00008364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e6  00000000  00000000  0001a03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  0001c928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd1  00000000  00000000  0001d880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024185  00000000  00000000  0001e451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013482  00000000  00000000  000425d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e176f  00000000  00000000  00055a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001371c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004154  00000000  00000000  00137280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  0013b3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d34  00000000  00000000  0013b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0013c144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000334 	.word	0x20000334
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080061e4 	.word	0x080061e4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000338 	.word	0x20000338
 8000204:	080061e4 	.word	0x080061e4

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2iz>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007dc:	d215      	bcs.n	800080a <__aeabi_d2iz+0x36>
 80007de:	d511      	bpl.n	8000804 <__aeabi_d2iz+0x30>
 80007e0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d912      	bls.n	8000810 <__aeabi_d2iz+0x3c>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007fa:	fa23 f002 	lsr.w	r0, r3, r2
 80007fe:	bf18      	it	ne
 8000800:	4240      	negne	r0, r0
 8000802:	4770      	bx	lr
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	4770      	bx	lr
 800080a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800080e:	d105      	bne.n	800081c <__aeabi_d2iz+0x48>
 8000810:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000814:	bf08      	it	eq
 8000816:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop

08000824 <__aeabi_uldivmod>:
 8000824:	b953      	cbnz	r3, 800083c <__aeabi_uldivmod+0x18>
 8000826:	b94a      	cbnz	r2, 800083c <__aeabi_uldivmod+0x18>
 8000828:	2900      	cmp	r1, #0
 800082a:	bf08      	it	eq
 800082c:	2800      	cmpeq	r0, #0
 800082e:	bf1c      	itt	ne
 8000830:	f04f 31ff 	movne.w	r1, #4294967295
 8000834:	f04f 30ff 	movne.w	r0, #4294967295
 8000838:	f000 b96a 	b.w	8000b10 <__aeabi_idiv0>
 800083c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000840:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000844:	f000 f806 	bl	8000854 <__udivmoddi4>
 8000848:	f8dd e004 	ldr.w	lr, [sp, #4]
 800084c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000850:	b004      	add	sp, #16
 8000852:	4770      	bx	lr

08000854 <__udivmoddi4>:
 8000854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000858:	9d08      	ldr	r5, [sp, #32]
 800085a:	460c      	mov	r4, r1
 800085c:	2b00      	cmp	r3, #0
 800085e:	d14e      	bne.n	80008fe <__udivmoddi4+0xaa>
 8000860:	4694      	mov	ip, r2
 8000862:	458c      	cmp	ip, r1
 8000864:	4686      	mov	lr, r0
 8000866:	fab2 f282 	clz	r2, r2
 800086a:	d962      	bls.n	8000932 <__udivmoddi4+0xde>
 800086c:	b14a      	cbz	r2, 8000882 <__udivmoddi4+0x2e>
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	4091      	lsls	r1, r2
 8000874:	fa20 f303 	lsr.w	r3, r0, r3
 8000878:	fa0c fc02 	lsl.w	ip, ip, r2
 800087c:	4319      	orrs	r1, r3
 800087e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000882:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000886:	fa1f f68c 	uxth.w	r6, ip
 800088a:	fbb1 f4f7 	udiv	r4, r1, r7
 800088e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000892:	fb07 1114 	mls	r1, r7, r4, r1
 8000896:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800089a:	fb04 f106 	mul.w	r1, r4, r6
 800089e:	4299      	cmp	r1, r3
 80008a0:	d90a      	bls.n	80008b8 <__udivmoddi4+0x64>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80008aa:	f080 8112 	bcs.w	8000ad2 <__udivmoddi4+0x27e>
 80008ae:	4299      	cmp	r1, r3
 80008b0:	f240 810f 	bls.w	8000ad2 <__udivmoddi4+0x27e>
 80008b4:	3c02      	subs	r4, #2
 80008b6:	4463      	add	r3, ip
 80008b8:	1a59      	subs	r1, r3, r1
 80008ba:	fa1f f38e 	uxth.w	r3, lr
 80008be:	fbb1 f0f7 	udiv	r0, r1, r7
 80008c2:	fb07 1110 	mls	r1, r7, r0, r1
 80008c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ca:	fb00 f606 	mul.w	r6, r0, r6
 80008ce:	429e      	cmp	r6, r3
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x94>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008da:	f080 80fc 	bcs.w	8000ad6 <__udivmoddi4+0x282>
 80008de:	429e      	cmp	r6, r3
 80008e0:	f240 80f9 	bls.w	8000ad6 <__udivmoddi4+0x282>
 80008e4:	4463      	add	r3, ip
 80008e6:	3802      	subs	r0, #2
 80008e8:	1b9b      	subs	r3, r3, r6
 80008ea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008ee:	2100      	movs	r1, #0
 80008f0:	b11d      	cbz	r5, 80008fa <__udivmoddi4+0xa6>
 80008f2:	40d3      	lsrs	r3, r2
 80008f4:	2200      	movs	r2, #0
 80008f6:	e9c5 3200 	strd	r3, r2, [r5]
 80008fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fe:	428b      	cmp	r3, r1
 8000900:	d905      	bls.n	800090e <__udivmoddi4+0xba>
 8000902:	b10d      	cbz	r5, 8000908 <__udivmoddi4+0xb4>
 8000904:	e9c5 0100 	strd	r0, r1, [r5]
 8000908:	2100      	movs	r1, #0
 800090a:	4608      	mov	r0, r1
 800090c:	e7f5      	b.n	80008fa <__udivmoddi4+0xa6>
 800090e:	fab3 f183 	clz	r1, r3
 8000912:	2900      	cmp	r1, #0
 8000914:	d146      	bne.n	80009a4 <__udivmoddi4+0x150>
 8000916:	42a3      	cmp	r3, r4
 8000918:	d302      	bcc.n	8000920 <__udivmoddi4+0xcc>
 800091a:	4290      	cmp	r0, r2
 800091c:	f0c0 80f0 	bcc.w	8000b00 <__udivmoddi4+0x2ac>
 8000920:	1a86      	subs	r6, r0, r2
 8000922:	eb64 0303 	sbc.w	r3, r4, r3
 8000926:	2001      	movs	r0, #1
 8000928:	2d00      	cmp	r5, #0
 800092a:	d0e6      	beq.n	80008fa <__udivmoddi4+0xa6>
 800092c:	e9c5 6300 	strd	r6, r3, [r5]
 8000930:	e7e3      	b.n	80008fa <__udivmoddi4+0xa6>
 8000932:	2a00      	cmp	r2, #0
 8000934:	f040 8090 	bne.w	8000a58 <__udivmoddi4+0x204>
 8000938:	eba1 040c 	sub.w	r4, r1, ip
 800093c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000940:	fa1f f78c 	uxth.w	r7, ip
 8000944:	2101      	movs	r1, #1
 8000946:	fbb4 f6f8 	udiv	r6, r4, r8
 800094a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800094e:	fb08 4416 	mls	r4, r8, r6, r4
 8000952:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000956:	fb07 f006 	mul.w	r0, r7, r6
 800095a:	4298      	cmp	r0, r3
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0x11c>
 800095e:	eb1c 0303 	adds.w	r3, ip, r3
 8000962:	f106 34ff 	add.w	r4, r6, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x11a>
 8000968:	4298      	cmp	r0, r3
 800096a:	f200 80cd 	bhi.w	8000b08 <__udivmoddi4+0x2b4>
 800096e:	4626      	mov	r6, r4
 8000970:	1a1c      	subs	r4, r3, r0
 8000972:	fa1f f38e 	uxth.w	r3, lr
 8000976:	fbb4 f0f8 	udiv	r0, r4, r8
 800097a:	fb08 4410 	mls	r4, r8, r0, r4
 800097e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000982:	fb00 f707 	mul.w	r7, r0, r7
 8000986:	429f      	cmp	r7, r3
 8000988:	d908      	bls.n	800099c <__udivmoddi4+0x148>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000992:	d202      	bcs.n	800099a <__udivmoddi4+0x146>
 8000994:	429f      	cmp	r7, r3
 8000996:	f200 80b0 	bhi.w	8000afa <__udivmoddi4+0x2a6>
 800099a:	4620      	mov	r0, r4
 800099c:	1bdb      	subs	r3, r3, r7
 800099e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009a2:	e7a5      	b.n	80008f0 <__udivmoddi4+0x9c>
 80009a4:	f1c1 0620 	rsb	r6, r1, #32
 80009a8:	408b      	lsls	r3, r1
 80009aa:	fa22 f706 	lsr.w	r7, r2, r6
 80009ae:	431f      	orrs	r7, r3
 80009b0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009b4:	fa04 f301 	lsl.w	r3, r4, r1
 80009b8:	ea43 030c 	orr.w	r3, r3, ip
 80009bc:	40f4      	lsrs	r4, r6
 80009be:	fa00 f801 	lsl.w	r8, r0, r1
 80009c2:	0c38      	lsrs	r0, r7, #16
 80009c4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009c8:	fbb4 fef0 	udiv	lr, r4, r0
 80009cc:	fa1f fc87 	uxth.w	ip, r7
 80009d0:	fb00 441e 	mls	r4, r0, lr, r4
 80009d4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009d8:	fb0e f90c 	mul.w	r9, lr, ip
 80009dc:	45a1      	cmp	r9, r4
 80009de:	fa02 f201 	lsl.w	r2, r2, r1
 80009e2:	d90a      	bls.n	80009fa <__udivmoddi4+0x1a6>
 80009e4:	193c      	adds	r4, r7, r4
 80009e6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009ea:	f080 8084 	bcs.w	8000af6 <__udivmoddi4+0x2a2>
 80009ee:	45a1      	cmp	r9, r4
 80009f0:	f240 8081 	bls.w	8000af6 <__udivmoddi4+0x2a2>
 80009f4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009f8:	443c      	add	r4, r7
 80009fa:	eba4 0409 	sub.w	r4, r4, r9
 80009fe:	fa1f f983 	uxth.w	r9, r3
 8000a02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a06:	fb00 4413 	mls	r4, r0, r3, r4
 8000a0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a12:	45a4      	cmp	ip, r4
 8000a14:	d907      	bls.n	8000a26 <__udivmoddi4+0x1d2>
 8000a16:	193c      	adds	r4, r7, r4
 8000a18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a1c:	d267      	bcs.n	8000aee <__udivmoddi4+0x29a>
 8000a1e:	45a4      	cmp	ip, r4
 8000a20:	d965      	bls.n	8000aee <__udivmoddi4+0x29a>
 8000a22:	3b02      	subs	r3, #2
 8000a24:	443c      	add	r4, r7
 8000a26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a2e:	eba4 040c 	sub.w	r4, r4, ip
 8000a32:	429c      	cmp	r4, r3
 8000a34:	46ce      	mov	lr, r9
 8000a36:	469c      	mov	ip, r3
 8000a38:	d351      	bcc.n	8000ade <__udivmoddi4+0x28a>
 8000a3a:	d04e      	beq.n	8000ada <__udivmoddi4+0x286>
 8000a3c:	b155      	cbz	r5, 8000a54 <__udivmoddi4+0x200>
 8000a3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a42:	eb64 040c 	sbc.w	r4, r4, ip
 8000a46:	fa04 f606 	lsl.w	r6, r4, r6
 8000a4a:	40cb      	lsrs	r3, r1
 8000a4c:	431e      	orrs	r6, r3
 8000a4e:	40cc      	lsrs	r4, r1
 8000a50:	e9c5 6400 	strd	r6, r4, [r5]
 8000a54:	2100      	movs	r1, #0
 8000a56:	e750      	b.n	80008fa <__udivmoddi4+0xa6>
 8000a58:	f1c2 0320 	rsb	r3, r2, #32
 8000a5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a64:	fa24 f303 	lsr.w	r3, r4, r3
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	430c      	orrs	r4, r1
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a74:	fa1f f78c 	uxth.w	r7, ip
 8000a78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a80:	0c23      	lsrs	r3, r4, #16
 8000a82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a86:	fb00 f107 	mul.w	r1, r0, r7
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0x24c>
 8000a8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a96:	d22c      	bcs.n	8000af2 <__udivmoddi4+0x29e>
 8000a98:	4299      	cmp	r1, r3
 8000a9a:	d92a      	bls.n	8000af2 <__udivmoddi4+0x29e>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000aa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb01 f307 	mul.w	r3, r1, r7
 8000ab4:	42a3      	cmp	r3, r4
 8000ab6:	d908      	bls.n	8000aca <__udivmoddi4+0x276>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ac0:	d213      	bcs.n	8000aea <__udivmoddi4+0x296>
 8000ac2:	42a3      	cmp	r3, r4
 8000ac4:	d911      	bls.n	8000aea <__udivmoddi4+0x296>
 8000ac6:	3902      	subs	r1, #2
 8000ac8:	4464      	add	r4, ip
 8000aca:	1ae4      	subs	r4, r4, r3
 8000acc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ad0:	e739      	b.n	8000946 <__udivmoddi4+0xf2>
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	e6f0      	b.n	80008b8 <__udivmoddi4+0x64>
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e706      	b.n	80008e8 <__udivmoddi4+0x94>
 8000ada:	45c8      	cmp	r8, r9
 8000adc:	d2ae      	bcs.n	8000a3c <__udivmoddi4+0x1e8>
 8000ade:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ae2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ae6:	3801      	subs	r0, #1
 8000ae8:	e7a8      	b.n	8000a3c <__udivmoddi4+0x1e8>
 8000aea:	4631      	mov	r1, r6
 8000aec:	e7ed      	b.n	8000aca <__udivmoddi4+0x276>
 8000aee:	4603      	mov	r3, r0
 8000af0:	e799      	b.n	8000a26 <__udivmoddi4+0x1d2>
 8000af2:	4630      	mov	r0, r6
 8000af4:	e7d4      	b.n	8000aa0 <__udivmoddi4+0x24c>
 8000af6:	46d6      	mov	lr, sl
 8000af8:	e77f      	b.n	80009fa <__udivmoddi4+0x1a6>
 8000afa:	4463      	add	r3, ip
 8000afc:	3802      	subs	r0, #2
 8000afe:	e74d      	b.n	800099c <__udivmoddi4+0x148>
 8000b00:	4606      	mov	r6, r0
 8000b02:	4623      	mov	r3, r4
 8000b04:	4608      	mov	r0, r1
 8000b06:	e70f      	b.n	8000928 <__udivmoddi4+0xd4>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	e730      	b.n	8000970 <__udivmoddi4+0x11c>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_idiv0>:
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// inicializando os filtros
	arm_biquad_cascade_df2T_init_f32(&SC, IIR_SECOESBIQUAD, &coefs_biquad_coracao_negados[0], &estado_biquad_coracao[0]);
 8000b18:	4b28      	ldr	r3, [pc, #160]	@ (8000bbc <main+0xa8>)
 8000b1a:	4a29      	ldr	r2, [pc, #164]	@ (8000bc0 <main+0xac>)
 8000b1c:	2114      	movs	r1, #20
 8000b1e:	4829      	ldr	r0, [pc, #164]	@ (8000bc4 <main+0xb0>)
 8000b20:	f005 fb28 	bl	8006174 <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&SP, IIR_SECOESBIQUAD, &coefs_biquad_pulmao_negados[0], &estado_biquad_pulmao[0]);
 8000b24:	4b28      	ldr	r3, [pc, #160]	@ (8000bc8 <main+0xb4>)
 8000b26:	4a29      	ldr	r2, [pc, #164]	@ (8000bcc <main+0xb8>)
 8000b28:	2114      	movs	r1, #20
 8000b2a:	4829      	ldr	r0, [pc, #164]	@ (8000bd0 <main+0xbc>)
 8000b2c:	f005 fb22 	bl	8006174 <arm_biquad_cascade_df2T_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b30:	f000 ffac 	bl	8001a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b34:	f000 f85e 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f000 fa98 	bl	800106c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b3c:	f000 fa58 	bl	8000ff0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b40:	f000 f8c4 	bl	8000ccc <MX_ADC1_Init>
  MX_TIM3_Init();
 8000b44:	f000 f93e 	bl	8000dc4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000b48:	f000 fa28 	bl	8000f9c <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000b4c:	f000 f910 	bl	8000d70 <MX_DAC_Init>
  MX_TIM4_Init();
 8000b50:	f000 f9ae 	bl	8000eb0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000b54:	2100      	movs	r1, #0
 8000b56:	481f      	ldr	r0, [pc, #124]	@ (8000bd4 <main+0xc0>)
 8000b58:	f003 fb68 	bl	800422c <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_1);
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	481e      	ldr	r0, [pc, #120]	@ (8000bd8 <main+0xc4>)
 8000b60:	f003 fb64 	bl	800422c <HAL_TIM_OC_Start>

  //Começa a enviar as medidas para a memoria no caso 16
  HAL_ADC_Start_DMA(&hadc1, &medidas[entra][0], N_AMOSTRAS);
 8000b64:	4b1d      	ldr	r3, [pc, #116]	@ (8000bdc <main+0xc8>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	021b      	lsls	r3, r3, #8
 8000b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000be0 <main+0xcc>)
 8000b6c:	4413      	add	r3, r2
 8000b6e:	2280      	movs	r2, #128	@ 0x80
 8000b70:	4619      	mov	r1, r3
 8000b72:	481c      	ldr	r0, [pc, #112]	@ (8000be4 <main+0xd0>)
 8000b74:	f001 f840 	bl	8001bf8 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
  {
    /* USER CODE END WHILE */
	   if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1 && soltou == 0){
 8000b78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b7c:	481a      	ldr	r0, [pc, #104]	@ (8000be8 <main+0xd4>)
 8000b7e:	f002 fc93 	bl	80034a8 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d10c      	bne.n	8000ba2 <main+0x8e>
 8000b88:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <main+0xd8>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d108      	bne.n	8000ba2 <main+0x8e>
	   		soltou = 1;
 8000b90:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <main+0xd8>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
	   		estado = ~estado;
 8000b96:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <main+0xdc>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <main+0xdc>)
 8000ba0:	701a      	strb	r2, [r3, #0]
	   	}

	   	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 8000ba2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba6:	4810      	ldr	r0, [pc, #64]	@ (8000be8 <main+0xd4>)
 8000ba8:	f002 fc7e 	bl	80034a8 <HAL_GPIO_ReadPin>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1e2      	bne.n	8000b78 <main+0x64>
	   	   soltou = 0;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <main+0xd8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
	   if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1 && soltou == 0){
 8000bb8:	e7de      	b.n	8000b78 <main+0x64>
 8000bba:	bf00      	nop
 8000bbc:	20000dac 	.word	0x20000dac
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000eec 	.word	0x20000eec
 8000bc8:	20000e4c 	.word	0x20000e4c
 8000bcc:	20000198 	.word	0x20000198
 8000bd0:	20000ef8 	.word	0x20000ef8
 8000bd4:	2000046c 	.word	0x2000046c
 8000bd8:	200004b4 	.word	0x200004b4
 8000bdc:	200007a4 	.word	0x200007a4
 8000be0:	200005a4 	.word	0x200005a4
 8000be4:	20000350 	.word	0x20000350
 8000be8:	40020800 	.word	0x40020800
 8000bec:	20000da8 	.word	0x20000da8
 8000bf0:	20000da9 	.word	0x20000da9

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b094      	sub	sp, #80	@ 0x50
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	2234      	movs	r2, #52	@ 0x34
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f005 fac2 	bl	800618c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	4b29      	ldr	r3, [pc, #164]	@ (8000cc4 <SystemClock_Config+0xd0>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c20:	4a28      	ldr	r2, [pc, #160]	@ (8000cc4 <SystemClock_Config+0xd0>)
 8000c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c28:	4b26      	ldr	r3, [pc, #152]	@ (8000cc4 <SystemClock_Config+0xd0>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	4b23      	ldr	r3, [pc, #140]	@ (8000cc8 <SystemClock_Config+0xd4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a22      	ldr	r2, [pc, #136]	@ (8000cc8 <SystemClock_Config+0xd4>)
 8000c3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <SystemClock_Config+0xd4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c54:	2301      	movs	r3, #1
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c60:	2300      	movs	r3, #0
 8000c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c64:	2308      	movs	r3, #8
 8000c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c68:	23a8      	movs	r3, #168	@ 0xa8
 8000c6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 ff8f 	bl	8003ba0 <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c88:	f000 fc32 	bl	80014f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c90:	2302      	movs	r3, #2
 8000c92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c98:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	2105      	movs	r1, #5
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 fc2e 	bl	800350c <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cb6:	f000 fc1b 	bl	80014f0 <Error_Handler>
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3750      	adds	r7, #80	@ 0x50
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40007000 	.word	0x40007000

08000ccc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cde:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000ce0:	4a22      	ldr	r2, [pc, #136]	@ (8000d6c <MX_ADC1_Init+0xa0>)
 8000ce2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000ce6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000cea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cec:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d06:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000d08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000d10:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d14:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d16:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d30:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000d32:	f000 ff1d 	bl	8001b70 <HAL_ADC_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000d3c:	f000 fbd8 	bl	80014f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_ADC1_Init+0x9c>)
 8000d52:	f001 f86b 	bl	8001e2c <HAL_ADC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d5c:	f000 fbc8 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000350 	.word	0x20000350
 8000d6c:	40012000 	.word	0x40012000

08000d70 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_DAC_Init+0x4c>)
 8000d80:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc0 <MX_DAC_Init+0x50>)
 8000d82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d84:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <MX_DAC_Init+0x4c>)
 8000d86:	f001 fc12 	bl	80025ae <HAL_DAC_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d90:	f000 fbae 	bl	80014f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000d94:	232c      	movs	r3, #44	@ 0x2c
 8000d96:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <MX_DAC_Init+0x4c>)
 8000da4:	f001 fd06 	bl	80027b4 <HAL_DAC_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000dae:	f000 fb9f 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200003f8 	.word	0x200003f8
 8000dc0:	40007400 	.word	0x40007400

08000dc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	@ 0x38
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	f107 0320 	add.w	r3, r7, #32
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000df4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea8 <MX_TIM3_Init+0xe4>)
 8000df6:	4a2d      	ldr	r2, [pc, #180]	@ (8000eac <MX_TIM3_Init+0xe8>)
 8000df8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 104;
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea8 <MX_TIM3_Init+0xe4>)
 8000dfc:	2268      	movs	r2, #104	@ 0x68
 8000dfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b29      	ldr	r3, [pc, #164]	@ (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000e06:	4b28      	ldr	r3, [pc, #160]	@ (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e08:	2263      	movs	r2, #99	@ 0x63
 8000e0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0c:	4b26      	ldr	r3, [pc, #152]	@ (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e12:	4b25      	ldr	r3, [pc, #148]	@ (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e18:	4823      	ldr	r0, [pc, #140]	@ (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e1a:	f003 f95f 	bl	80040dc <HAL_TIM_Base_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000e24:	f000 fb64 	bl	80014f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e32:	4619      	mov	r1, r3
 8000e34:	481c      	ldr	r0, [pc, #112]	@ (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e36:	f003 fb1d 	bl	8004474 <HAL_TIM_ConfigClockSource>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000e40:	f000 fb56 	bl	80014f0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e44:	4818      	ldr	r0, [pc, #96]	@ (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e46:	f003 f998 	bl	800417a <HAL_TIM_OC_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e50:	f000 fb4e 	bl	80014f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e54:	2320      	movs	r3, #32
 8000e56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5c:	f107 0320 	add.w	r3, r7, #32
 8000e60:	4619      	mov	r1, r3
 8000e62:	4811      	ldr	r0, [pc, #68]	@ (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e64:	f003 feea 	bl	8004c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000e6e:	f000 fb3f 	bl	80014f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000e72:	2330      	movs	r3, #48	@ 0x30
 8000e74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	4807      	ldr	r0, [pc, #28]	@ (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e8a:	f003 fa97 	bl	80043bc <HAL_TIM_OC_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000e94:	f000 fb2c 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e98:	4803      	ldr	r0, [pc, #12]	@ (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e9a:	f000 fc7f 	bl	800179c <HAL_TIM_MspPostInit>

}
 8000e9e:	bf00      	nop
 8000ea0:	3738      	adds	r7, #56	@ 0x38
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000046c 	.word	0x2000046c
 8000eac:	40000400 	.word	0x40000400

08000eb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	@ 0x38
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	f107 0320 	add.w	r3, r7, #32
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
 8000edc:	615a      	str	r2, [r3, #20]
 8000ede:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f94 <MX_TIM4_Init+0xe4>)
 8000ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000ee4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 104;
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f94 <MX_TIM4_Init+0xe4>)
 8000ee8:	2268      	movs	r2, #104	@ 0x68
 8000eea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b29      	ldr	r3, [pc, #164]	@ (8000f94 <MX_TIM4_Init+0xe4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000ef2:	4b28      	ldr	r3, [pc, #160]	@ (8000f94 <MX_TIM4_Init+0xe4>)
 8000ef4:	2263      	movs	r2, #99	@ 0x63
 8000ef6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef8:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <MX_TIM4_Init+0xe4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efe:	4b25      	ldr	r3, [pc, #148]	@ (8000f94 <MX_TIM4_Init+0xe4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f04:	4823      	ldr	r0, [pc, #140]	@ (8000f94 <MX_TIM4_Init+0xe4>)
 8000f06:	f003 f8e9 	bl	80040dc <HAL_TIM_Base_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000f10:	f000 faee 	bl	80014f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	481c      	ldr	r0, [pc, #112]	@ (8000f94 <MX_TIM4_Init+0xe4>)
 8000f22:	f003 faa7 	bl	8004474 <HAL_TIM_ConfigClockSource>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000f2c:	f000 fae0 	bl	80014f0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000f30:	4818      	ldr	r0, [pc, #96]	@ (8000f94 <MX_TIM4_Init+0xe4>)
 8000f32:	f003 f922 	bl	800417a <HAL_TIM_OC_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000f3c:	f000 fad8 	bl	80014f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f40:	2320      	movs	r3, #32
 8000f42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4811      	ldr	r0, [pc, #68]	@ (8000f94 <MX_TIM4_Init+0xe4>)
 8000f50:	f003 fe74 	bl	8004c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000f5a:	f000 fac9 	bl	80014f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f5e:	2330      	movs	r3, #48	@ 0x30
 8000f60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	4807      	ldr	r0, [pc, #28]	@ (8000f94 <MX_TIM4_Init+0xe4>)
 8000f76:	f003 fa21 	bl	80043bc <HAL_TIM_OC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000f80:	f000 fab6 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <MX_TIM4_Init+0xe4>)
 8000f86:	f000 fc09 	bl	800179c <HAL_TIM_MspPostInit>

}
 8000f8a:	bf00      	nop
 8000f8c:	3738      	adds	r7, #56	@ 0x38
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200004b4 	.word	0x200004b4
 8000f98:	40000800 	.word	0x40000800

08000f9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <MX_USART2_UART_Init+0x50>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000fac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fd4:	f003 feae 	bl	8004d34 <HAL_UART_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fde:	f000 fa87 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200004fc 	.word	0x200004fc
 8000fec:	40004400 	.word	0x40004400

08000ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8001068 <MX_DMA_Init+0x78>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8001068 <MX_DMA_Init+0x78>)
 8001000:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <MX_DMA_Init+0x78>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_DMA_Init+0x78>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a13      	ldr	r2, [pc, #76]	@ (8001068 <MX_DMA_Init+0x78>)
 800101c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_DMA_Init+0x78>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2010      	movs	r0, #16
 8001034:	f001 fa85 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001038:	2010      	movs	r0, #16
 800103a:	f001 fa9e 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2011      	movs	r0, #17
 8001044:	f001 fa7d 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001048:	2011      	movs	r0, #17
 800104a:	f001 fa96 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2038      	movs	r0, #56	@ 0x38
 8001054:	f001 fa75 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001058:	2038      	movs	r0, #56	@ 0x38
 800105a:	f001 fa8e 	bl	800257a <HAL_NVIC_EnableIRQ>

}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800

0800106c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	@ 0x28
 8001070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b3d      	ldr	r3, [pc, #244]	@ (800117c <MX_GPIO_Init+0x110>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a3c      	ldr	r2, [pc, #240]	@ (800117c <MX_GPIO_Init+0x110>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b3a      	ldr	r3, [pc, #232]	@ (800117c <MX_GPIO_Init+0x110>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b36      	ldr	r3, [pc, #216]	@ (800117c <MX_GPIO_Init+0x110>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a35      	ldr	r2, [pc, #212]	@ (800117c <MX_GPIO_Init+0x110>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b33      	ldr	r3, [pc, #204]	@ (800117c <MX_GPIO_Init+0x110>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	4b2f      	ldr	r3, [pc, #188]	@ (800117c <MX_GPIO_Init+0x110>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a2e      	ldr	r2, [pc, #184]	@ (800117c <MX_GPIO_Init+0x110>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <MX_GPIO_Init+0x110>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b28      	ldr	r3, [pc, #160]	@ (800117c <MX_GPIO_Init+0x110>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a27      	ldr	r2, [pc, #156]	@ (800117c <MX_GPIO_Init+0x110>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b25      	ldr	r3, [pc, #148]	@ (800117c <MX_GPIO_Init+0x110>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|SAIDA_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2105      	movs	r1, #5
 80010f6:	4822      	ldr	r0, [pc, #136]	@ (8001180 <MX_GPIO_Init+0x114>)
 80010f8:	f002 f9ee 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2120      	movs	r1, #32
 8001100:	4820      	ldr	r0, [pc, #128]	@ (8001184 <MX_GPIO_Init+0x118>)
 8001102:	f002 f9e9 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001106:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800110c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4818      	ldr	r0, [pc, #96]	@ (8001180 <MX_GPIO_Init+0x114>)
 800111e:	f002 f82f 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 SAIDA_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|SAIDA_Pin;
 8001122:	2305      	movs	r3, #5
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	4811      	ldr	r0, [pc, #68]	@ (8001180 <MX_GPIO_Init+0x114>)
 800113a:	f002 f821 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENTRADA_Pin */
  GPIO_InitStruct.Pin = ENTRADA_Pin;
 800113e:	2302      	movs	r3, #2
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENTRADA_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	480b      	ldr	r0, [pc, #44]	@ (8001180 <MX_GPIO_Init+0x114>)
 8001152:	f002 f815 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001156:	2320      	movs	r3, #32
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_GPIO_Init+0x118>)
 800116e:	f002 f807 	bl	8003180 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	@ 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40020800 	.word	0x40020800
 8001184:	40020000 	.word	0x40020000

08001188 <clamp_value>:

int clamp_value(int16_t value ) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
	if(estado == 0) value = (value*3) + 1400;
 8001192:	4b21      	ldr	r3, [pc, #132]	@ (8001218 <clamp_value+0x90>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <clamp_value+0x26>
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	461a      	mov	r2, r3
 800119e:	0052      	lsls	r2, r2, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	80fb      	strh	r3, [r7, #6]
 80011ac:	e01a      	b.n	80011e4 <clamp_value+0x5c>
	else value = (value*1.4) + 1400;
 80011ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff faa4 	bl	8000700 <__aeabi_i2d>
 80011b8:	a315      	add	r3, pc, #84	@ (adr r3, 8001210 <clamp_value+0x88>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff f823 	bl	8000208 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b13      	ldr	r3, [pc, #76]	@ (800121c <clamp_value+0x94>)
 80011d0:	f7ff f94a 	bl	8000468 <__adddf3>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fafa 	bl	80007d4 <__aeabi_d2iz>
 80011e0:	4603      	mov	r3, r0
 80011e2:	80fb      	strh	r3, [r7, #6]
    if (value < 0.00) return 0;
 80011e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	da01      	bge.n	80011f0 <clamp_value+0x68>
 80011ec:	2300      	movs	r3, #0
 80011ee:	e009      	b.n	8001204 <clamp_value+0x7c>
    if (value > 4095) return 4095;
 80011f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011f8:	db02      	blt.n	8001200 <clamp_value+0x78>
 80011fa:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80011fe:	e001      	b.n	8001204 <clamp_value+0x7c>
    return value;
 8001200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	f3af 8000 	nop.w
 8001210:	66666666 	.word	0x66666666
 8001214:	3ff66666 	.word	0x3ff66666
 8001218:	20000da9 	.word	0x20000da9
 800121c:	4095e000 	.word	0x4095e000

08001220 <HAL_ADC_ConvHalfCpltCallback>:

/**
  * Processamento da metade dos dados aquisicionados pelo ADC
  * Checagem do botão | 0 para pulmão | 1 para coração
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

	for(int amostra = 0; amostra < (N_AMOSTRAS/2); amostra++)
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e018      	b.n	8001260 <HAL_ADC_ConvHalfCpltCallback+0x40>
	{
		entrada[amostra] = (float32_t)medidas[entra][amostra]-Voffset;
 800122e:	4b3f      	ldr	r3, [pc, #252]	@ (800132c <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	493f      	ldr	r1, [pc, #252]	@ (8001330 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001234:	01da      	lsls	r2, r3, #7
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	4413      	add	r3, r2
 800123a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001246:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001334 <HAL_ADC_ConvHalfCpltCallback+0x114>
 800124a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800124e:	4a3a      	ldr	r2, [pc, #232]	@ (8001338 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	edc3 7a00 	vstr	s15, [r3]
	for(int amostra = 0; amostra < (N_AMOSTRAS/2); amostra++)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2b3f      	cmp	r3, #63	@ 0x3f
 8001264:	dde3      	ble.n	800122e <HAL_ADC_ConvHalfCpltCallback+0xe>

	}

	// LOOP DE FILTRAGEM DOS SONS
	for (int k = 0; k < (NUM_BLOCKS/2); k++)
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	e023      	b.n	80012b4 <HAL_ADC_ConvHalfCpltCallback+0x94>
	{
		if(estado == 0){
 800126c:	4b33      	ldr	r3, [pc, #204]	@ (800133c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10e      	bne.n	8001292 <HAL_ADC_ConvHalfCpltCallback+0x72>
			arm_biquad_cascade_df2T_f32(&SP, InputValuesf32_ptr + (k*BLOCK_SIZE), OutputValuesf32_ptr + (k*BLOCK_SIZE), BLOCK_SIZE);
 8001274:	4b32      	ldr	r3, [pc, #200]	@ (8001340 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	01db      	lsls	r3, r3, #7
 800127c:	18d1      	adds	r1, r2, r3
 800127e:	4b31      	ldr	r3, [pc, #196]	@ (8001344 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	01db      	lsls	r3, r3, #7
 8001286:	441a      	add	r2, r3
 8001288:	2320      	movs	r3, #32
 800128a:	482f      	ldr	r0, [pc, #188]	@ (8001348 <HAL_ADC_ConvHalfCpltCallback+0x128>)
 800128c:	f004 fdb6 	bl	8005dfc <arm_biquad_cascade_df2T_f32>
 8001290:	e00d      	b.n	80012ae <HAL_ADC_ConvHalfCpltCallback+0x8e>
		}
		else
			arm_biquad_cascade_df2T_f32(&SC, InputValuesf32_ptr + (k*BLOCK_SIZE), OutputValuesf32_ptr + (k*BLOCK_SIZE), BLOCK_SIZE);
 8001292:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	01db      	lsls	r3, r3, #7
 800129a:	18d1      	adds	r1, r2, r3
 800129c:	4b29      	ldr	r3, [pc, #164]	@ (8001344 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	01db      	lsls	r3, r3, #7
 80012a4:	441a      	add	r2, r3
 80012a6:	2320      	movs	r3, #32
 80012a8:	4828      	ldr	r0, [pc, #160]	@ (800134c <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 80012aa:	f004 fda7 	bl	8005dfc <arm_biquad_cascade_df2T_f32>
	for (int k = 0; k < (NUM_BLOCKS/2); k++)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	3301      	adds	r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	ddd8      	ble.n	800126c <HAL_ADC_ConvHalfCpltCallback+0x4c>

	}

	for (int k = 0; k < (N_AMOSTRAS/2); k++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e02c      	b.n	800131a <HAL_ADC_ConvHalfCpltCallback+0xfa>
	{
		int16_t var = clamp_value((int16_t)saida[k]);
 80012c0:	4a23      	ldr	r2, [pc, #140]	@ (8001350 <HAL_ADC_ConvHalfCpltCallback+0x130>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d0:	ee17 3a90 	vmov	r3, s15
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff56 	bl	8001188 <clamp_value>
 80012dc:	4603      	mov	r3, r0
 80012de:	817b      	strh	r3, [r7, #10]
		amostras_de_saida_py[k] = ((int16_t)saida[k])*GANHO_AUDIO; 	// Passando de float para int | para ser enviado pela serial
 80012e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001350 <HAL_ADC_ConvHalfCpltCallback+0x130>)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f0:	ee17 3a90 	vmov	r3, s15
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b219      	sxth	r1, r3
 8001302:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		amostras_de_saida[k] = var;		// Passando de float para int | para ser enviado pelo DAC
 800130a:	4913      	ldr	r1, [pc, #76]	@ (8001358 <HAL_ADC_ConvHalfCpltCallback+0x138>)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	897a      	ldrh	r2, [r7, #10]
 8001310:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int k = 0; k < (N_AMOSTRAS/2); k++)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b3f      	cmp	r3, #63	@ 0x3f
 800131e:	ddcf      	ble.n	80012c0 <HAL_ADC_ConvHalfCpltCallback+0xa0>
	}
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200007a4 	.word	0x200007a4
 8001330:	200005a4 	.word	0x200005a4
 8001334:	4491a000 	.word	0x4491a000
 8001338:	200007a8 	.word	0x200007a8
 800133c:	20000da9 	.word	0x20000da9
 8001340:	20000000 	.word	0x20000000
 8001344:	20000004 	.word	0x20000004
 8001348:	20000ef8 	.word	0x20000ef8
 800134c:	20000eec 	.word	0x20000eec
 8001350:	200009a8 	.word	0x200009a8
 8001354:	20000ca8 	.word	0x20000ca8
 8001358:	20000ba8 	.word	0x20000ba8

0800135c <HAL_ADC_ConvCpltCallback>:

/**
  * Processamento da segunda metade dos dados aquisicionados pelo ADC
  * Início do próximo ADC e transmissão de dados
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af02      	add	r7, sp, #8
 8001362:	6078      	str	r0, [r7, #4]
	int16_t ent = entra; // Var para manter o processamento das amostras
 8001364:	4b53      	ldr	r3, [pc, #332]	@ (80014b4 <HAL_ADC_ConvCpltCallback+0x158>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	817b      	strh	r3, [r7, #10]

	if(++entra>1) entra=0; // Começo do próximo aquisionamento
 800136a:	4b52      	ldr	r3, [pc, #328]	@ (80014b4 <HAL_ADC_ConvCpltCallback+0x158>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b50      	ldr	r3, [pc, #320]	@ (80014b4 <HAL_ADC_ConvCpltCallback+0x158>)
 8001374:	801a      	strh	r2, [r3, #0]
 8001376:	4b4f      	ldr	r3, [pc, #316]	@ (80014b4 <HAL_ADC_ConvCpltCallback+0x158>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d902      	bls.n	8001384 <HAL_ADC_ConvCpltCallback+0x28>
 800137e:	4b4d      	ldr	r3, [pc, #308]	@ (80014b4 <HAL_ADC_ConvCpltCallback+0x158>)
 8001380:	2200      	movs	r2, #0
 8001382:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, &medidas[entra][0], N_AMOSTRAS);
 8001384:	4b4b      	ldr	r3, [pc, #300]	@ (80014b4 <HAL_ADC_ConvCpltCallback+0x158>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	4a4b      	ldr	r2, [pc, #300]	@ (80014b8 <HAL_ADC_ConvCpltCallback+0x15c>)
 800138c:	4413      	add	r3, r2
 800138e:	2280      	movs	r2, #128	@ 0x80
 8001390:	4619      	mov	r1, r3
 8001392:	484a      	ldr	r0, [pc, #296]	@ (80014bc <HAL_ADC_ConvCpltCallback+0x160>)
 8001394:	f000 fc30 	bl	8001bf8 <HAL_ADC_Start_DMA>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &amostras_de_saida[0], N_AMOSTRAS, DAC_ALIGN_12B_R);
 8001398:	2300      	movs	r3, #0
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2380      	movs	r3, #128	@ 0x80
 800139e:	4a48      	ldr	r2, [pc, #288]	@ (80014c0 <HAL_ADC_ConvCpltCallback+0x164>)
 80013a0:	2100      	movs	r1, #0
 80013a2:	4848      	ldr	r0, [pc, #288]	@ (80014c4 <HAL_ADC_ConvCpltCallback+0x168>)
 80013a4:	f001 f926 	bl	80025f4 <HAL_DAC_Start_DMA>

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
	for(int amostra = (N_AMOSTRAS/2); amostra < N_AMOSTRAS; amostra++)
 80013a8:	2340      	movs	r3, #64	@ 0x40
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	e018      	b.n	80013e0 <HAL_ADC_ConvCpltCallback+0x84>
	{
		entrada[amostra] = (float32_t)medidas[ent][amostra]-Voffset;
 80013ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013b2:	4941      	ldr	r1, [pc, #260]	@ (80014b8 <HAL_ADC_ConvCpltCallback+0x15c>)
 80013b4:	01da      	lsls	r2, r3, #7
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	4413      	add	r3, r2
 80013ba:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c6:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80014c8 <HAL_ADC_ConvCpltCallback+0x16c>
 80013ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ce:	4a3f      	ldr	r2, [pc, #252]	@ (80014cc <HAL_ADC_ConvCpltCallback+0x170>)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	edc3 7a00 	vstr	s15, [r3]
	for(int amostra = (N_AMOSTRAS/2); amostra < N_AMOSTRAS; amostra++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80013e4:	dde3      	ble.n	80013ae <HAL_ADC_ConvCpltCallback+0x52>
	}

	for (int k = (NUM_BLOCKS/2); k < NUM_BLOCKS; k++)
 80013e6:	2302      	movs	r3, #2
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	e023      	b.n	8001434 <HAL_ADC_ConvCpltCallback+0xd8>
	{
		if(estado == 0){
 80013ec:	4b38      	ldr	r3, [pc, #224]	@ (80014d0 <HAL_ADC_ConvCpltCallback+0x174>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10e      	bne.n	8001412 <HAL_ADC_ConvCpltCallback+0xb6>
			arm_biquad_cascade_df2T_f32(&SP, InputValuesf32_ptr + (k*BLOCK_SIZE), OutputValuesf32_ptr + (k*BLOCK_SIZE), BLOCK_SIZE);
 80013f4:	4b37      	ldr	r3, [pc, #220]	@ (80014d4 <HAL_ADC_ConvCpltCallback+0x178>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	01db      	lsls	r3, r3, #7
 80013fc:	18d1      	adds	r1, r2, r3
 80013fe:	4b36      	ldr	r3, [pc, #216]	@ (80014d8 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	01db      	lsls	r3, r3, #7
 8001406:	441a      	add	r2, r3
 8001408:	2320      	movs	r3, #32
 800140a:	4834      	ldr	r0, [pc, #208]	@ (80014dc <HAL_ADC_ConvCpltCallback+0x180>)
 800140c:	f004 fcf6 	bl	8005dfc <arm_biquad_cascade_df2T_f32>
 8001410:	e00d      	b.n	800142e <HAL_ADC_ConvCpltCallback+0xd2>
		}
		else
			arm_biquad_cascade_df2T_f32(&SC, InputValuesf32_ptr + (k*BLOCK_SIZE), OutputValuesf32_ptr + (k*BLOCK_SIZE), BLOCK_SIZE);
 8001412:	4b30      	ldr	r3, [pc, #192]	@ (80014d4 <HAL_ADC_ConvCpltCallback+0x178>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	01db      	lsls	r3, r3, #7
 800141a:	18d1      	adds	r1, r2, r3
 800141c:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <HAL_ADC_ConvCpltCallback+0x17c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	01db      	lsls	r3, r3, #7
 8001424:	441a      	add	r2, r3
 8001426:	2320      	movs	r3, #32
 8001428:	482d      	ldr	r0, [pc, #180]	@ (80014e0 <HAL_ADC_ConvCpltCallback+0x184>)
 800142a:	f004 fce7 	bl	8005dfc <arm_biquad_cascade_df2T_f32>
	for (int k = (NUM_BLOCKS/2); k < NUM_BLOCKS; k++)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	3301      	adds	r3, #1
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	2b03      	cmp	r3, #3
 8001438:	ddd8      	ble.n	80013ec <HAL_ADC_ConvCpltCallback+0x90>
	}


	for (int k = (N_AMOSTRAS/2); k < N_AMOSTRAS; k++)
 800143a:	2340      	movs	r3, #64	@ 0x40
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e02c      	b.n	800149a <HAL_ADC_ConvCpltCallback+0x13e>
	{
		int16_t var = clamp_value((int16_t)saida[k]);
 8001440:	4a28      	ldr	r2, [pc, #160]	@ (80014e4 <HAL_ADC_ConvCpltCallback+0x188>)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001450:	ee17 3a90 	vmov	r3, s15
 8001454:	b21b      	sxth	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fe96 	bl	8001188 <clamp_value>
 800145c:	4603      	mov	r3, r0
 800145e:	813b      	strh	r3, [r7, #8]
		amostras_de_saida_py[k] = ((int16_t)saida[k])*GANHO_AUDIO;	// Passando de float para int | para ser enviado pela serial
 8001460:	4a20      	ldr	r2, [pc, #128]	@ (80014e4 <HAL_ADC_ConvCpltCallback+0x188>)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001470:	ee17 3a90 	vmov	r3, s15
 8001474:	b21b      	sxth	r3, r3
 8001476:	b29b      	uxth	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4413      	add	r3, r2
 800147e:	b29b      	uxth	r3, r3
 8001480:	b219      	sxth	r1, r3
 8001482:	4a19      	ldr	r2, [pc, #100]	@ (80014e8 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		amostras_de_saida[k] = var;		// Passando de float para int | para ser enviado pelo DAC
 800148a:	490d      	ldr	r1, [pc, #52]	@ (80014c0 <HAL_ADC_ConvCpltCallback+0x164>)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	893a      	ldrh	r2, [r7, #8]
 8001490:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int k = (N_AMOSTRAS/2); k < N_AMOSTRAS; k++)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b7f      	cmp	r3, #127	@ 0x7f
 800149e:	ddcf      	ble.n	8001440 <HAL_ADC_ConvCpltCallback+0xe4>
	}
	HAL_UART_Transmit_DMA(&huart2, &amostras_de_saida_py[0], N_AMOSTRAS*2);
 80014a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014a4:	4910      	ldr	r1, [pc, #64]	@ (80014e8 <HAL_ADC_ConvCpltCallback+0x18c>)
 80014a6:	4811      	ldr	r0, [pc, #68]	@ (80014ec <HAL_ADC_ConvCpltCallback+0x190>)
 80014a8:	f003 fc94 	bl	8004dd4 <HAL_UART_Transmit_DMA>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
}
 80014ac:	bf00      	nop
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200007a4 	.word	0x200007a4
 80014b8:	200005a4 	.word	0x200005a4
 80014bc:	20000350 	.word	0x20000350
 80014c0:	20000ba8 	.word	0x20000ba8
 80014c4:	200003f8 	.word	0x200003f8
 80014c8:	4491a000 	.word	0x4491a000
 80014cc:	200007a8 	.word	0x200007a8
 80014d0:	20000da9 	.word	0x20000da9
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000004 	.word	0x20000004
 80014dc:	20000ef8 	.word	0x20000ef8
 80014e0:	20000eec 	.word	0x20000eec
 80014e4:	200009a8 	.word	0x200009a8
 80014e8:	20000ca8 	.word	0x20000ca8
 80014ec:	200004fc 	.word	0x200004fc

080014f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <Error_Handler+0x8>

080014fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <HAL_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	4a0f      	ldr	r2, [pc, #60]	@ (8001548 <HAL_MspInit+0x4c>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001510:	6453      	str	r3, [r2, #68]	@ 0x44
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <HAL_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <HAL_MspInit+0x4c>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800153a:	2007      	movs	r0, #7
 800153c:	f000 fff6 	bl	800252c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a2f      	ldr	r2, [pc, #188]	@ (8001628 <HAL_ADC_MspInit+0xdc>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d157      	bne.n	800161e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <HAL_ADC_MspInit+0xe0>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a2d      	ldr	r2, [pc, #180]	@ (800162c <HAL_ADC_MspInit+0xe0>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <HAL_ADC_MspInit+0xe0>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b27      	ldr	r3, [pc, #156]	@ (800162c <HAL_ADC_MspInit+0xe0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a26      	ldr	r2, [pc, #152]	@ (800162c <HAL_ADC_MspInit+0xe0>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b24      	ldr	r3, [pc, #144]	@ (800162c <HAL_ADC_MspInit+0xe0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015a6:	2301      	movs	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015aa:	2303      	movs	r3, #3
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	481d      	ldr	r0, [pc, #116]	@ (8001630 <HAL_ADC_MspInit+0xe4>)
 80015ba:	f001 fde1 	bl	8003180 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015be:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <HAL_ADC_MspInit+0xe8>)
 80015c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <HAL_ADC_MspInit+0xec>)
 80015c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <HAL_ADC_MspInit+0xe8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <HAL_ADC_MspInit+0xe8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d0:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <HAL_ADC_MspInit+0xe8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015d6:	4b17      	ldr	r3, [pc, #92]	@ (8001634 <HAL_ADC_MspInit+0xe8>)
 80015d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_ADC_MspInit+0xe8>)
 80015e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015e6:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <HAL_ADC_MspInit+0xe8>)
 80015e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_ADC_MspInit+0xe8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <HAL_ADC_MspInit+0xe8>)
 80015f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <HAL_ADC_MspInit+0xe8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001602:	480c      	ldr	r0, [pc, #48]	@ (8001634 <HAL_ADC_MspInit+0xe8>)
 8001604:	f001 f9ba 	bl	800297c <HAL_DMA_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800160e:	f7ff ff6f 	bl	80014f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a07      	ldr	r2, [pc, #28]	@ (8001634 <HAL_ADC_MspInit+0xe8>)
 8001616:	639a      	str	r2, [r3, #56]	@ 0x38
 8001618:	4a06      	ldr	r2, [pc, #24]	@ (8001634 <HAL_ADC_MspInit+0xe8>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40012000 	.word	0x40012000
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000
 8001634:	20000398 	.word	0x20000398
 8001638:	40026410 	.word	0x40026410

0800163c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a2f      	ldr	r2, [pc, #188]	@ (8001718 <HAL_DAC_MspInit+0xdc>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d158      	bne.n	8001710 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b2e      	ldr	r3, [pc, #184]	@ (800171c <HAL_DAC_MspInit+0xe0>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	4a2d      	ldr	r2, [pc, #180]	@ (800171c <HAL_DAC_MspInit+0xe0>)
 8001668:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800166c:	6413      	str	r3, [r2, #64]	@ 0x40
 800166e:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <HAL_DAC_MspInit+0xe0>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b27      	ldr	r3, [pc, #156]	@ (800171c <HAL_DAC_MspInit+0xe0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a26      	ldr	r2, [pc, #152]	@ (800171c <HAL_DAC_MspInit+0xe0>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b24      	ldr	r3, [pc, #144]	@ (800171c <HAL_DAC_MspInit+0xe0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001696:	2310      	movs	r3, #16
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169a:	2303      	movs	r3, #3
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	481d      	ldr	r0, [pc, #116]	@ (8001720 <HAL_DAC_MspInit+0xe4>)
 80016aa:	f001 fd69 	bl	8003180 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80016ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <HAL_DAC_MspInit+0xe8>)
 80016b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001728 <HAL_DAC_MspInit+0xec>)
 80016b2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <HAL_DAC_MspInit+0xe8>)
 80016b6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80016ba:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016bc:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_DAC_MspInit+0xe8>)
 80016be:	2240      	movs	r2, #64	@ 0x40
 80016c0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c2:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <HAL_DAC_MspInit+0xe8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <HAL_DAC_MspInit+0xe8>)
 80016ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ce:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <HAL_DAC_MspInit+0xe8>)
 80016d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016d6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_DAC_MspInit+0xe8>)
 80016da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016de:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80016e0:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <HAL_DAC_MspInit+0xe8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <HAL_DAC_MspInit+0xe8>)
 80016e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016ec:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <HAL_DAC_MspInit+0xe8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80016f4:	480b      	ldr	r0, [pc, #44]	@ (8001724 <HAL_DAC_MspInit+0xe8>)
 80016f6:	f001 f941 	bl	800297c <HAL_DMA_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001700:	f7ff fef6 	bl	80014f0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <HAL_DAC_MspInit+0xe8>)
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	4a06      	ldr	r2, [pc, #24]	@ (8001724 <HAL_DAC_MspInit+0xe8>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	@ 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40007400 	.word	0x40007400
 800171c:	40023800 	.word	0x40023800
 8001720:	40020000 	.word	0x40020000
 8001724:	2000040c 	.word	0x2000040c
 8001728:	40026088 	.word	0x40026088

0800172c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a15      	ldr	r2, [pc, #84]	@ (8001790 <HAL_TIM_Base_MspInit+0x64>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d10e      	bne.n	800175c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	4a13      	ldr	r2, [pc, #76]	@ (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6413      	str	r3, [r2, #64]	@ 0x40
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800175a:	e012      	b.n	8001782 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <HAL_TIM_Base_MspInit+0x6c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d10d      	bne.n	8001782 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <HAL_TIM_Base_MspInit+0x68>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	4a09      	ldr	r2, [pc, #36]	@ (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6413      	str	r3, [r2, #64]	@ 0x40
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40000400 	.word	0x40000400
 8001794:	40023800 	.word	0x40023800
 8001798:	40000800 	.word	0x40000800

0800179c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a24      	ldr	r2, [pc, #144]	@ (800184c <HAL_TIM_MspPostInit+0xb0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d11e      	bne.n	80017fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <HAL_TIM_MspPostInit+0xb4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a22      	ldr	r2, [pc, #136]	@ (8001850 <HAL_TIM_MspPostInit+0xb4>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b20      	ldr	r3, [pc, #128]	@ (8001850 <HAL_TIM_MspPostInit+0xb4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017da:	2340      	movs	r3, #64	@ 0x40
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ea:	2302      	movs	r3, #2
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4817      	ldr	r0, [pc, #92]	@ (8001854 <HAL_TIM_MspPostInit+0xb8>)
 80017f6:	f001 fcc3 	bl	8003180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017fa:	e022      	b.n	8001842 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a15      	ldr	r2, [pc, #84]	@ (8001858 <HAL_TIM_MspPostInit+0xbc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d11d      	bne.n	8001842 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <HAL_TIM_MspPostInit+0xb4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a10      	ldr	r2, [pc, #64]	@ (8001850 <HAL_TIM_MspPostInit+0xb4>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <HAL_TIM_MspPostInit+0xb4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001822:	2340      	movs	r3, #64	@ 0x40
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001832:	2302      	movs	r3, #2
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4807      	ldr	r0, [pc, #28]	@ (800185c <HAL_TIM_MspPostInit+0xc0>)
 800183e:	f001 fc9f 	bl	8003180 <HAL_GPIO_Init>
}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	@ 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40000400 	.word	0x40000400
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000
 8001858:	40000800 	.word	0x40000800
 800185c:	40020400 	.word	0x40020400

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	@ 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a34      	ldr	r2, [pc, #208]	@ (8001950 <HAL_UART_MspInit+0xf0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d162      	bne.n	8001948 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b33      	ldr	r3, [pc, #204]	@ (8001954 <HAL_UART_MspInit+0xf4>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a32      	ldr	r2, [pc, #200]	@ (8001954 <HAL_UART_MspInit+0xf4>)
 800188c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b30      	ldr	r3, [pc, #192]	@ (8001954 <HAL_UART_MspInit+0xf4>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001954 <HAL_UART_MspInit+0xf4>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001954 <HAL_UART_MspInit+0xf4>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b29      	ldr	r3, [pc, #164]	@ (8001954 <HAL_UART_MspInit+0xf4>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ba:	230c      	movs	r3, #12
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ca:	2307      	movs	r3, #7
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4820      	ldr	r0, [pc, #128]	@ (8001958 <HAL_UART_MspInit+0xf8>)
 80018d6:	f001 fc53 	bl	8003180 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80018da:	4b20      	ldr	r3, [pc, #128]	@ (800195c <HAL_UART_MspInit+0xfc>)
 80018dc:	4a20      	ldr	r2, [pc, #128]	@ (8001960 <HAL_UART_MspInit+0x100>)
 80018de:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80018e0:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <HAL_UART_MspInit+0xfc>)
 80018e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018e8:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <HAL_UART_MspInit+0xfc>)
 80018ea:	2240      	movs	r2, #64	@ 0x40
 80018ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ee:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <HAL_UART_MspInit+0xfc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <HAL_UART_MspInit+0xfc>)
 80018f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018fc:	4b17      	ldr	r3, [pc, #92]	@ (800195c <HAL_UART_MspInit+0xfc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <HAL_UART_MspInit+0xfc>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <HAL_UART_MspInit+0xfc>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800190e:	4b13      	ldr	r3, [pc, #76]	@ (800195c <HAL_UART_MspInit+0xfc>)
 8001910:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001914:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001916:	4b11      	ldr	r3, [pc, #68]	@ (800195c <HAL_UART_MspInit+0xfc>)
 8001918:	2200      	movs	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800191c:	480f      	ldr	r0, [pc, #60]	@ (800195c <HAL_UART_MspInit+0xfc>)
 800191e:	f001 f82d 	bl	800297c <HAL_DMA_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001928:	f7ff fde2 	bl	80014f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a0b      	ldr	r2, [pc, #44]	@ (800195c <HAL_UART_MspInit+0xfc>)
 8001930:	639a      	str	r2, [r3, #56]	@ 0x38
 8001932:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <HAL_UART_MspInit+0xfc>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2026      	movs	r0, #38	@ 0x26
 800193e:	f000 fe00 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001942:	2026      	movs	r0, #38	@ 0x26
 8001944:	f000 fe19 	bl	800257a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	@ 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40004400 	.word	0x40004400
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000
 800195c:	20000544 	.word	0x20000544
 8001960:	400260a0 	.word	0x400260a0

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <NMI_Handler+0x4>

0800196c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <MemManage_Handler+0x4>

0800197c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <UsageFault_Handler+0x4>

0800198c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ba:	f000 f8b9 	bl	8001b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <DMA1_Stream5_IRQHandler+0x10>)
 80019ca:	f001 f96f 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000040c 	.word	0x2000040c

080019d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <DMA1_Stream6_IRQHandler+0x10>)
 80019de:	f001 f965 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000544 	.word	0x20000544

080019ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <USART2_IRQHandler+0x10>)
 80019f2:	f003 fa5f 	bl	8004eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200004fc 	.word	0x200004fc

08001a00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a04:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <DMA2_Stream0_IRQHandler+0x10>)
 8001a06:	f001 f951 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000398 	.word	0x20000398

08001a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <SystemInit+0x20>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a1e:	4a05      	ldr	r2, [pc, #20]	@ (8001a34 <SystemInit+0x20>)
 8001a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a3c:	f7ff ffea 	bl	8001a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a40:	480c      	ldr	r0, [pc, #48]	@ (8001a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a42:	490d      	ldr	r1, [pc, #52]	@ (8001a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a44:	4a0d      	ldr	r2, [pc, #52]	@ (8001a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a58:	4c0a      	ldr	r4, [pc, #40]	@ (8001a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a66:	f004 fb99 	bl	800619c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6a:	f7ff f853 	bl	8000b14 <main>
  bx  lr    
 8001a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a78:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8001a7c:	0800622c 	.word	0x0800622c
  ldr r2, =_sbss
 8001a80:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8001a84:	20000f08 	.word	0x20000f08

08001a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a90:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <HAL_Init+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0d      	ldr	r2, [pc, #52]	@ (8001acc <HAL_Init+0x40>)
 8001a96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <HAL_Init+0x40>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <HAL_Init+0x40>)
 8001aa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <HAL_Init+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a07      	ldr	r2, [pc, #28]	@ (8001acc <HAL_Init+0x40>)
 8001aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	f000 fd39 	bl	800252c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f000 f808 	bl	8001ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac0:	f7ff fd1c 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023c00 	.word	0x40023c00

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_InitTick+0x54>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_InitTick+0x58>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fd51 	bl	8002596 <HAL_SYSTICK_Config>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00e      	b.n	8001b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b0f      	cmp	r3, #15
 8001b02:	d80a      	bhi.n	8001b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b04:	2200      	movs	r2, #0
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f000 fd19 	bl	8002542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b10:	4a06      	ldr	r2, [pc, #24]	@ (8001b2c <HAL_InitTick+0x5c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e000      	b.n	8001b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000328 	.word	0x20000328
 8001b28:	20000330 	.word	0x20000330
 8001b2c:	2000032c 	.word	0x2000032c

08001b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_IncTick+0x20>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_IncTick+0x24>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <HAL_IncTick+0x24>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000330 	.word	0x20000330
 8001b54:	20000f04 	.word	0x20000f04

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <HAL_GetTick+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000f04 	.word	0x20000f04

08001b70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e033      	b.n	8001bee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fcdc 	bl	800154c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d118      	bne.n	8001be0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bb6:	f023 0302 	bic.w	r3, r3, #2
 8001bba:	f043 0202 	orr.w	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 fa64 	bl	8002090 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f023 0303 	bic.w	r3, r3, #3
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bde:	e001      	b.n	8001be4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_Start_DMA+0x1e>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e0e9      	b.n	8001dea <HAL_ADC_Start_DMA+0x1f2>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d018      	beq.n	8001c5e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c3c:	4b6d      	ldr	r3, [pc, #436]	@ (8001df4 <HAL_ADC_Start_DMA+0x1fc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a6d      	ldr	r2, [pc, #436]	@ (8001df8 <HAL_ADC_Start_DMA+0x200>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	0c9a      	lsrs	r2, r3, #18
 8001c48:	4613      	mov	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001c50:	e002      	b.n	8001c58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f9      	bne.n	8001c52 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c6c:	d107      	bne.n	8001c7e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c7c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	f040 80a1 	bne.w	8001dd0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c96:	f023 0301 	bic.w	r3, r3, #1
 8001c9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ccc:	d106      	bne.n	8001cdc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	f023 0206 	bic.w	r2, r3, #6
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cda:	e002      	b.n	8001ce2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cea:	4b44      	ldr	r3, [pc, #272]	@ (8001dfc <HAL_ADC_Start_DMA+0x204>)
 8001cec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf2:	4a43      	ldr	r2, [pc, #268]	@ (8001e00 <HAL_ADC_Start_DMA+0x208>)
 8001cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cfa:	4a42      	ldr	r2, [pc, #264]	@ (8001e04 <HAL_ADC_Start_DMA+0x20c>)
 8001cfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d02:	4a41      	ldr	r2, [pc, #260]	@ (8001e08 <HAL_ADC_Start_DMA+0x210>)
 8001d04:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001d1e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d2e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	334c      	adds	r3, #76	@ 0x4c
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f000 feca 	bl	8002ad8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d12a      	bne.n	8001da6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a2d      	ldr	r2, [pc, #180]	@ (8001e0c <HAL_ADC_Start_DMA+0x214>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d015      	beq.n	8001d86 <HAL_ADC_Start_DMA+0x18e>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001e10 <HAL_ADC_Start_DMA+0x218>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d105      	bne.n	8001d70 <HAL_ADC_Start_DMA+0x178>
 8001d64:	4b25      	ldr	r3, [pc, #148]	@ (8001dfc <HAL_ADC_Start_DMA+0x204>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00a      	beq.n	8001d86 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a27      	ldr	r2, [pc, #156]	@ (8001e14 <HAL_ADC_Start_DMA+0x21c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d136      	bne.n	8001de8 <HAL_ADC_Start_DMA+0x1f0>
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_ADC_Start_DMA+0x204>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d130      	bne.n	8001de8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d129      	bne.n	8001de8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	e020      	b.n	8001de8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a18      	ldr	r2, [pc, #96]	@ (8001e0c <HAL_ADC_Start_DMA+0x214>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d11b      	bne.n	8001de8 <HAL_ADC_Start_DMA+0x1f0>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d114      	bne.n	8001de8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	e00b      	b.n	8001de8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f043 0210 	orr.w	r2, r3, #16
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000328 	.word	0x20000328
 8001df8:	431bde83 	.word	0x431bde83
 8001dfc:	40012300 	.word	0x40012300
 8001e00:	08002289 	.word	0x08002289
 8001e04:	08002343 	.word	0x08002343
 8001e08:	0800235f 	.word	0x0800235f
 8001e0c:	40012000 	.word	0x40012000
 8001e10:	40012100 	.word	0x40012100
 8001e14:	40012200 	.word	0x40012200

08001e18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1c>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e113      	b.n	8002070 <HAL_ADC_ConfigChannel+0x244>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d925      	bls.n	8001ea4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68d9      	ldr	r1, [r3, #12]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b1e      	subs	r3, #30
 8001e6e:	2207      	movs	r2, #7
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43da      	mvns	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68d9      	ldr	r1, [r3, #12]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	4603      	mov	r3, r0
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4403      	add	r3, r0
 8001e96:	3b1e      	subs	r3, #30
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	e022      	b.n	8001eea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6919      	ldr	r1, [r3, #16]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2207      	movs	r2, #7
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6919      	ldr	r1, [r3, #16]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4403      	add	r3, r0
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d824      	bhi.n	8001f3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	3b05      	subs	r3, #5
 8001f04:	221f      	movs	r2, #31
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	400a      	ands	r2, r1
 8001f12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b05      	subs	r3, #5
 8001f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f3a:	e04c      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b0c      	cmp	r3, #12
 8001f42:	d824      	bhi.n	8001f8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	3b23      	subs	r3, #35	@ 0x23
 8001f56:	221f      	movs	r2, #31
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	400a      	ands	r2, r1
 8001f64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b23      	subs	r3, #35	@ 0x23
 8001f80:	fa00 f203 	lsl.w	r2, r0, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f8c:	e023      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b41      	subs	r3, #65	@ 0x41
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	400a      	ands	r2, r1
 8001fae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b41      	subs	r3, #65	@ 0x41
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd6:	4b29      	ldr	r3, [pc, #164]	@ (800207c <HAL_ADC_ConfigChannel+0x250>)
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a28      	ldr	r2, [pc, #160]	@ (8002080 <HAL_ADC_ConfigChannel+0x254>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d10f      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1d8>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b12      	cmp	r3, #18
 8001fea:	d10b      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1d      	ldr	r2, [pc, #116]	@ (8002080 <HAL_ADC_ConfigChannel+0x254>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12b      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x23a>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1c      	ldr	r2, [pc, #112]	@ (8002084 <HAL_ADC_ConfigChannel+0x258>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d003      	beq.n	8002020 <HAL_ADC_ConfigChannel+0x1f4>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b11      	cmp	r3, #17
 800201e:	d122      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a11      	ldr	r2, [pc, #68]	@ (8002084 <HAL_ADC_ConfigChannel+0x258>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d111      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002042:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <HAL_ADC_ConfigChannel+0x25c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a11      	ldr	r2, [pc, #68]	@ (800208c <HAL_ADC_ConfigChannel+0x260>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	0c9a      	lsrs	r2, r3, #18
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002058:	e002      	b.n	8002060 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3b01      	subs	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40012300 	.word	0x40012300
 8002080:	40012000 	.word	0x40012000
 8002084:	10000012 	.word	0x10000012
 8002088:	20000328 	.word	0x20000328
 800208c:	431bde83 	.word	0x431bde83

08002090 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002098:	4b79      	ldr	r3, [pc, #484]	@ (8002280 <ADC_Init+0x1f0>)
 800209a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	021a      	lsls	r2, r3, #8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800210a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6899      	ldr	r1, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002122:	4a58      	ldr	r2, [pc, #352]	@ (8002284 <ADC_Init+0x1f4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002136:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6899      	ldr	r1, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6899      	ldr	r1, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e00f      	b.n	800218e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800217c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800218c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0202 	bic.w	r2, r2, #2
 800219c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7e1b      	ldrb	r3, [r3, #24]
 80021a8:	005a      	lsls	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01b      	beq.n	80021f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	3b01      	subs	r3, #1
 80021e8:	035a      	lsls	r2, r3, #13
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	e007      	b.n	8002204 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002202:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	3b01      	subs	r3, #1
 8002220:	051a      	lsls	r2, r3, #20
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002246:	025a      	lsls	r2, r3, #9
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800225e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6899      	ldr	r1, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	029a      	lsls	r2, r3, #10
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	609a      	str	r2, [r3, #8]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40012300 	.word	0x40012300
 8002284:	0f000001 	.word	0x0f000001

08002288 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002294:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d13c      	bne.n	800231c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d12b      	bne.n	8002314 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d127      	bne.n	8002314 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d006      	beq.n	80022e0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d119      	bne.n	8002314 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0220 	bic.w	r2, r2, #32
 80022ee:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	f043 0201 	orr.w	r2, r3, #1
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7ff f821 	bl	800135c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800231a:	e00e      	b.n	800233a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff fd75 	bl	8001e18 <HAL_ADC_ErrorCallback>
}
 800232e:	e004      	b.n	800233a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f7fe ff65 	bl	8001220 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2240      	movs	r2, #64	@ 0x40
 8002370:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	f043 0204 	orr.w	r2, r3, #4
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7ff fd4a 	bl	8001e18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800239c:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023be:	4a04      	ldr	r2, [pc, #16]	@ (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	60d3      	str	r3, [r2, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d8:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <__NVIC_GetPriorityGrouping+0x18>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 0307 	and.w	r3, r3, #7
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db0b      	blt.n	800241a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	4907      	ldr	r1, [pc, #28]	@ (8002428 <__NVIC_EnableIRQ+0x38>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	@ (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	@ (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	@ 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	@ 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f8:	d301      	bcc.n	80024fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00f      	b.n	800251e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <SysTick_Config+0x40>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002506:	210f      	movs	r1, #15
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f7ff ff8e 	bl	800242c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002510:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <SysTick_Config+0x40>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002516:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <SysTick_Config+0x40>)
 8002518:	2207      	movs	r2, #7
 800251a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	e000e010 	.word	0xe000e010

0800252c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff29 	bl	800238c <__NVIC_SetPriorityGrouping>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002554:	f7ff ff3e 	bl	80023d4 <__NVIC_GetPriorityGrouping>
 8002558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7ff ff8e 	bl	8002480 <NVIC_EncodePriority>
 8002564:	4602      	mov	r2, r0
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff5d 	bl	800242c <__NVIC_SetPriority>
}
 8002572:	bf00      	nop
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff31 	bl	80023f0 <__NVIC_EnableIRQ>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff ffa2 	bl	80024e8 <SysTick_Config>
 80025a4:	4603      	mov	r3, r0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e014      	b.n	80025ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	791b      	ldrb	r3, [r3, #4]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d105      	bne.n	80025d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff f833 	bl	800163c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2202      	movs	r2, #2
 80025da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0a2      	b.n	8002756 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	795b      	ldrb	r3, [r3, #5]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_DAC_Start_DMA+0x28>
 8002618:	2302      	movs	r3, #2
 800261a:	e09c      	b.n	8002756 <HAL_DAC_Start_DMA+0x162>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2201      	movs	r2, #1
 8002620:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2202      	movs	r2, #2
 8002626:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d129      	bne.n	8002682 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	4a4b      	ldr	r2, [pc, #300]	@ (8002760 <HAL_DAC_Start_DMA+0x16c>)
 8002634:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4a4a      	ldr	r2, [pc, #296]	@ (8002764 <HAL_DAC_Start_DMA+0x170>)
 800263c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4a49      	ldr	r2, [pc, #292]	@ (8002768 <HAL_DAC_Start_DMA+0x174>)
 8002644:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002654:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_DAC_Start_DMA+0x70>
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	2b04      	cmp	r3, #4
 8002660:	d005      	beq.n	800266e <HAL_DAC_Start_DMA+0x7a>
 8002662:	e009      	b.n	8002678 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3308      	adds	r3, #8
 800266a:	613b      	str	r3, [r7, #16]
        break;
 800266c:	e033      	b.n	80026d6 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	330c      	adds	r3, #12
 8002674:	613b      	str	r3, [r7, #16]
        break;
 8002676:	e02e      	b.n	80026d6 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3310      	adds	r3, #16
 800267e:	613b      	str	r3, [r7, #16]
        break;
 8002680:	e029      	b.n	80026d6 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4a39      	ldr	r2, [pc, #228]	@ (800276c <HAL_DAC_Start_DMA+0x178>)
 8002688:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	4a38      	ldr	r2, [pc, #224]	@ (8002770 <HAL_DAC_Start_DMA+0x17c>)
 8002690:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	4a37      	ldr	r2, [pc, #220]	@ (8002774 <HAL_DAC_Start_DMA+0x180>)
 8002698:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80026a8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_DAC_Start_DMA+0xc4>
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d005      	beq.n	80026c2 <HAL_DAC_Start_DMA+0xce>
 80026b6:	e009      	b.n	80026cc <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3314      	adds	r3, #20
 80026be:	613b      	str	r3, [r7, #16]
        break;
 80026c0:	e009      	b.n	80026d6 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3318      	adds	r3, #24
 80026c8:	613b      	str	r3, [r7, #16]
        break;
 80026ca:	e004      	b.n	80026d6 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	331c      	adds	r3, #28
 80026d2:	613b      	str	r3, [r7, #16]
        break;
 80026d4:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d111      	bne.n	8002700 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6898      	ldr	r0, [r3, #8]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	f000 f9ef 	bl	8002ad8 <HAL_DMA_Start_IT>
 80026fa:	4603      	mov	r3, r0
 80026fc:	75fb      	strb	r3, [r7, #23]
 80026fe:	e010      	b.n	8002722 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800270e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	68d8      	ldr	r0, [r3, #12]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	f000 f9dd 	bl	8002ad8 <HAL_DMA_Start_IT>
 800271e:	4603      	mov	r3, r0
 8002720:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10c      	bne.n	8002748 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6819      	ldr	r1, [r3, #0]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2201      	movs	r2, #1
 800273c:	409a      	lsls	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e005      	b.n	8002754 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f043 0204 	orr.w	r2, r3, #4
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002754:	7dfb      	ldrb	r3, [r7, #23]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	08002867 	.word	0x08002867
 8002764:	08002889 	.word	0x08002889
 8002768:	080028a5 	.word	0x080028a5
 800276c:	0800290f 	.word	0x0800290f
 8002770:	08002931 	.word	0x08002931
 8002774:	0800294d 	.word	0x0800294d

08002778 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	@ 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_DAC_ConfigChannel+0x1c>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e042      	b.n	800285a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	795b      	ldrb	r3, [r3, #5]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_DAC_ConfigChannel+0x2c>
 80027dc:	2302      	movs	r3, #2
 80027de:	e03c      	b.n	800285a <HAL_DAC_ConfigChannel+0xa6>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2202      	movs	r2, #2
 80027ea:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6819      	ldr	r1, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	22c0      	movs	r2, #192	@ 0xc0
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	400a      	ands	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002858:	7ffb      	ldrb	r3, [r7, #31]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	@ 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002872:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f7ff ff7f 	bl	8002778 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	711a      	strb	r2, [r3, #4]
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002894:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff ff78 	bl	800278c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f043 0204 	orr.w	r2, r3, #4
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f7ff ff6e 	bl	80027a0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	711a      	strb	r2, [r3, #4]
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff ffd8 	bl	80028d2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	711a      	strb	r2, [r3, #4]
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7ff ffd1 	bl	80028e6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002958:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f043 0204 	orr.w	r2, r3, #4
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f7ff ffc7 	bl	80028fa <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	711a      	strb	r2, [r3, #4]
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002988:	f7ff f8e6 	bl	8001b58 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e099      	b.n	8002acc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b8:	e00f      	b.n	80029da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ba:	f7ff f8cd 	bl	8001b58 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d908      	bls.n	80029da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2203      	movs	r2, #3
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e078      	b.n	8002acc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e8      	bne.n	80029ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4b38      	ldr	r3, [pc, #224]	@ (8002ad4 <HAL_DMA_Init+0x158>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d107      	bne.n	8002a44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f023 0307 	bic.w	r3, r3, #7
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d117      	bne.n	8002a9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00e      	beq.n	8002a9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fb01 	bl	8003088 <DMA_CheckFifoParam>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2240      	movs	r2, #64	@ 0x40
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e016      	b.n	8002acc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fab8 	bl	800301c <DMA_CalcBaseAndBitshift>
 8002aac:	4603      	mov	r3, r0
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab4:	223f      	movs	r2, #63	@ 0x3f
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	f010803f 	.word	0xf010803f

08002ad8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_DMA_Start_IT+0x26>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e040      	b.n	8002b80 <HAL_DMA_Start_IT+0xa8>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d12f      	bne.n	8002b72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2202      	movs	r2, #2
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fa4a 	bl	8002fc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	223f      	movs	r2, #63	@ 0x3f
 8002b32:	409a      	lsls	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0216 	orr.w	r2, r2, #22
 8002b46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0208 	orr.w	r2, r2, #8
 8002b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e005      	b.n	8002b7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b96:	f7fe ffdf 	bl	8001b58 <HAL_GetTick>
 8002b9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d008      	beq.n	8002bba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2280      	movs	r2, #128	@ 0x80
 8002bac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e052      	b.n	8002c60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0216 	bic.w	r2, r2, #22
 8002bc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_DMA_Abort+0x62>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0208 	bic.w	r2, r2, #8
 8002bf8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c0a:	e013      	b.n	8002c34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c0c:	f7fe ffa4 	bl	8001b58 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d90c      	bls.n	8002c34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2203      	movs	r2, #3
 8002c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e015      	b.n	8002c60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1e4      	bne.n	8002c0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c46:	223f      	movs	r2, #63	@ 0x3f
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d004      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2280      	movs	r2, #128	@ 0x80
 8002c80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00c      	b.n	8002ca0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2205      	movs	r2, #5
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0201 	bic.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cb8:	4b8e      	ldr	r3, [pc, #568]	@ (8002ef4 <HAL_DMA_IRQHandler+0x248>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a8e      	ldr	r2, [pc, #568]	@ (8002ef8 <HAL_DMA_IRQHandler+0x24c>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	0a9b      	lsrs	r3, r3, #10
 8002cc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d01a      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0204 	bic.w	r2, r2, #4
 8002cfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d04:	2208      	movs	r2, #8
 8002d06:	409a      	lsls	r2, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d012      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d46:	f043 0202 	orr.w	r2, r3, #2
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d52:	2204      	movs	r2, #4
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d012      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00b      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	2204      	movs	r2, #4
 8002d72:	409a      	lsls	r2, r3
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7c:	f043 0204 	orr.w	r2, r3, #4
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	2210      	movs	r2, #16
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d043      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03c      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	2210      	movs	r2, #16
 8002da8:	409a      	lsls	r2, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d018      	beq.n	8002dee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d108      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d024      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
 8002dda:	e01f      	b.n	8002e1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01b      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
 8002dec:	e016      	b.n	8002e1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d107      	bne.n	8002e0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0208 	bic.w	r2, r2, #8
 8002e0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e20:	2220      	movs	r2, #32
 8002e22:	409a      	lsls	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 808f 	beq.w	8002f4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8087 	beq.w	8002f4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e42:	2220      	movs	r2, #32
 8002e44:	409a      	lsls	r2, r3
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d136      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0216 	bic.w	r2, r2, #22
 8002e64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <HAL_DMA_IRQHandler+0x1da>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0208 	bic.w	r2, r2, #8
 8002e94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9a:	223f      	movs	r2, #63	@ 0x3f
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d07e      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
        }
        return;
 8002ec2:	e079      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01d      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10d      	bne.n	8002efc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d031      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
 8002ef0:	e02c      	b.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
 8002ef2:	bf00      	nop
 8002ef4:	20000328 	.word	0x20000328
 8002ef8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d023      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
 8002f0c:	e01e      	b.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10f      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0210 	bic.w	r2, r2, #16
 8002f2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d032      	beq.n	8002fba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d022      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2205      	movs	r2, #5
 8002f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d307      	bcc.n	8002f94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f2      	bne.n	8002f78 <HAL_DMA_IRQHandler+0x2cc>
 8002f92:	e000      	b.n	8002f96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
 8002fb6:	e000      	b.n	8002fba <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fb8:	bf00      	nop
    }
  }
}
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b40      	cmp	r3, #64	@ 0x40
 8002fec:	d108      	bne.n	8003000 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ffe:	e007      	b.n	8003010 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	60da      	str	r2, [r3, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	3b10      	subs	r3, #16
 800302c:	4a14      	ldr	r2, [pc, #80]	@ (8003080 <DMA_CalcBaseAndBitshift+0x64>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003036:	4a13      	ldr	r2, [pc, #76]	@ (8003084 <DMA_CalcBaseAndBitshift+0x68>)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d909      	bls.n	800305e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003052:	f023 0303 	bic.w	r3, r3, #3
 8003056:	1d1a      	adds	r2, r3, #4
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	659a      	str	r2, [r3, #88]	@ 0x58
 800305c:	e007      	b.n	800306e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003066:	f023 0303 	bic.w	r3, r3, #3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	aaaaaaab 	.word	0xaaaaaaab
 8003084:	08006214 	.word	0x08006214

08003088 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11f      	bne.n	80030e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d856      	bhi.n	8003156 <DMA_CheckFifoParam+0xce>
 80030a8:	a201      	add	r2, pc, #4	@ (adr r2, 80030b0 <DMA_CheckFifoParam+0x28>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030d3 	.word	0x080030d3
 80030b8:	080030c1 	.word	0x080030c1
 80030bc:	08003157 	.word	0x08003157
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d046      	beq.n	800315a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d0:	e043      	b.n	800315a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030da:	d140      	bne.n	800315e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e0:	e03d      	b.n	800315e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ea:	d121      	bne.n	8003130 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d837      	bhi.n	8003162 <DMA_CheckFifoParam+0xda>
 80030f2:	a201      	add	r2, pc, #4	@ (adr r2, 80030f8 <DMA_CheckFifoParam+0x70>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	08003109 	.word	0x08003109
 80030fc:	0800310f 	.word	0x0800310f
 8003100:	08003109 	.word	0x08003109
 8003104:	08003121 	.word	0x08003121
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
      break;
 800310c:	e030      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003112:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d025      	beq.n	8003166 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800311e:	e022      	b.n	8003166 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003124:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003128:	d11f      	bne.n	800316a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800312e:	e01c      	b.n	800316a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d903      	bls.n	800313e <DMA_CheckFifoParam+0xb6>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d003      	beq.n	8003144 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800313c:	e018      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
      break;
 8003142:	e015      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00e      	beq.n	800316e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      break;
 8003154:	e00b      	b.n	800316e <DMA_CheckFifoParam+0xe6>
      break;
 8003156:	bf00      	nop
 8003158:	e00a      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 800315a:	bf00      	nop
 800315c:	e008      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 800315e:	bf00      	nop
 8003160:	e006      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 8003162:	bf00      	nop
 8003164:	e004      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 8003166:	bf00      	nop
 8003168:	e002      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;   
 800316a:	bf00      	nop
 800316c:	e000      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 800316e:	bf00      	nop
    }
  } 
  
  return status; 
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop

08003180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	@ 0x24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	e165      	b.n	8003468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800319c:	2201      	movs	r2, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	f040 8154 	bne.w	8003462 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d005      	beq.n	80031d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d130      	bne.n	8003234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	2203      	movs	r2, #3
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003208:	2201      	movs	r2, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 0201 	and.w	r2, r3, #1
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b03      	cmp	r3, #3
 800323e:	d017      	beq.n	8003270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d123      	bne.n	80032c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	08da      	lsrs	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3208      	adds	r2, #8
 8003284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	220f      	movs	r2, #15
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	08da      	lsrs	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3208      	adds	r2, #8
 80032be:	69b9      	ldr	r1, [r7, #24]
 80032c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	2203      	movs	r2, #3
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80ae 	beq.w	8003462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	4b5d      	ldr	r3, [pc, #372]	@ (8003480 <HAL_GPIO_Init+0x300>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	4a5c      	ldr	r2, [pc, #368]	@ (8003480 <HAL_GPIO_Init+0x300>)
 8003310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003314:	6453      	str	r3, [r2, #68]	@ 0x44
 8003316:	4b5a      	ldr	r3, [pc, #360]	@ (8003480 <HAL_GPIO_Init+0x300>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003322:	4a58      	ldr	r2, [pc, #352]	@ (8003484 <HAL_GPIO_Init+0x304>)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	3302      	adds	r3, #2
 800332a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	220f      	movs	r2, #15
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4013      	ands	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4f      	ldr	r2, [pc, #316]	@ (8003488 <HAL_GPIO_Init+0x308>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d025      	beq.n	800339a <HAL_GPIO_Init+0x21a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4e      	ldr	r2, [pc, #312]	@ (800348c <HAL_GPIO_Init+0x30c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d01f      	beq.n	8003396 <HAL_GPIO_Init+0x216>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4d      	ldr	r2, [pc, #308]	@ (8003490 <HAL_GPIO_Init+0x310>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d019      	beq.n	8003392 <HAL_GPIO_Init+0x212>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4c      	ldr	r2, [pc, #304]	@ (8003494 <HAL_GPIO_Init+0x314>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_GPIO_Init+0x20e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4b      	ldr	r2, [pc, #300]	@ (8003498 <HAL_GPIO_Init+0x318>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00d      	beq.n	800338a <HAL_GPIO_Init+0x20a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a4a      	ldr	r2, [pc, #296]	@ (800349c <HAL_GPIO_Init+0x31c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <HAL_GPIO_Init+0x206>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a49      	ldr	r2, [pc, #292]	@ (80034a0 <HAL_GPIO_Init+0x320>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <HAL_GPIO_Init+0x202>
 800337e:	2306      	movs	r3, #6
 8003380:	e00c      	b.n	800339c <HAL_GPIO_Init+0x21c>
 8003382:	2307      	movs	r3, #7
 8003384:	e00a      	b.n	800339c <HAL_GPIO_Init+0x21c>
 8003386:	2305      	movs	r3, #5
 8003388:	e008      	b.n	800339c <HAL_GPIO_Init+0x21c>
 800338a:	2304      	movs	r3, #4
 800338c:	e006      	b.n	800339c <HAL_GPIO_Init+0x21c>
 800338e:	2303      	movs	r3, #3
 8003390:	e004      	b.n	800339c <HAL_GPIO_Init+0x21c>
 8003392:	2302      	movs	r3, #2
 8003394:	e002      	b.n	800339c <HAL_GPIO_Init+0x21c>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_GPIO_Init+0x21c>
 800339a:	2300      	movs	r3, #0
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	f002 0203 	and.w	r2, r2, #3
 80033a2:	0092      	lsls	r2, r2, #2
 80033a4:	4093      	lsls	r3, r2
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033ac:	4935      	ldr	r1, [pc, #212]	@ (8003484 <HAL_GPIO_Init+0x304>)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	3302      	adds	r3, #2
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ba:	4b3a      	ldr	r3, [pc, #232]	@ (80034a4 <HAL_GPIO_Init+0x324>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033de:	4a31      	ldr	r2, [pc, #196]	@ (80034a4 <HAL_GPIO_Init+0x324>)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033e4:	4b2f      	ldr	r3, [pc, #188]	@ (80034a4 <HAL_GPIO_Init+0x324>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003408:	4a26      	ldr	r2, [pc, #152]	@ (80034a4 <HAL_GPIO_Init+0x324>)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800340e:	4b25      	ldr	r3, [pc, #148]	@ (80034a4 <HAL_GPIO_Init+0x324>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003432:	4a1c      	ldr	r2, [pc, #112]	@ (80034a4 <HAL_GPIO_Init+0x324>)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003438:	4b1a      	ldr	r3, [pc, #104]	@ (80034a4 <HAL_GPIO_Init+0x324>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800345c:	4a11      	ldr	r2, [pc, #68]	@ (80034a4 <HAL_GPIO_Init+0x324>)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3301      	adds	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2b0f      	cmp	r3, #15
 800346c:	f67f ae96 	bls.w	800319c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	3724      	adds	r7, #36	@ 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	40013800 	.word	0x40013800
 8003488:	40020000 	.word	0x40020000
 800348c:	40020400 	.word	0x40020400
 8003490:	40020800 	.word	0x40020800
 8003494:	40020c00 	.word	0x40020c00
 8003498:	40021000 	.word	0x40021000
 800349c:	40021400 	.word	0x40021400
 80034a0:	40021800 	.word	0x40021800
 80034a4:	40013c00 	.word	0x40013c00

080034a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	887b      	ldrh	r3, [r7, #2]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	e001      	b.n	80034ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
 80034e4:	4613      	mov	r3, r2
 80034e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e8:	787b      	ldrb	r3, [r7, #1]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034f4:	e003      	b.n	80034fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	041a      	lsls	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	619a      	str	r2, [r3, #24]
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0cc      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003520:	4b68      	ldr	r3, [pc, #416]	@ (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d90c      	bls.n	8003548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b65      	ldr	r3, [pc, #404]	@ (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	4b63      	ldr	r3, [pc, #396]	@ (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0b8      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d020      	beq.n	8003596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003560:	4b59      	ldr	r3, [pc, #356]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4a58      	ldr	r2, [pc, #352]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800356a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003578:	4b53      	ldr	r3, [pc, #332]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4a52      	ldr	r2, [pc, #328]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003584:	4b50      	ldr	r3, [pc, #320]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	494d      	ldr	r1, [pc, #308]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d044      	beq.n	800362c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b47      	ldr	r3, [pc, #284]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d119      	bne.n	80035ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e07f      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d003      	beq.n	80035ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d107      	bne.n	80035da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ca:	4b3f      	ldr	r3, [pc, #252]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e06f      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035da:	4b3b      	ldr	r3, [pc, #236]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e067      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ea:	4b37      	ldr	r3, [pc, #220]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f023 0203 	bic.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4934      	ldr	r1, [pc, #208]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035fc:	f7fe faac 	bl	8001b58 <HAL_GetTick>
 8003600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003602:	e00a      	b.n	800361a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003604:	f7fe faa8 	bl	8001b58 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e04f      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361a:	4b2b      	ldr	r3, [pc, #172]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 020c 	and.w	r2, r3, #12
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	429a      	cmp	r2, r3
 800362a:	d1eb      	bne.n	8003604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800362c:	4b25      	ldr	r3, [pc, #148]	@ (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d20c      	bcs.n	8003654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b22      	ldr	r3, [pc, #136]	@ (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e032      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003660:	4b19      	ldr	r3, [pc, #100]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4916      	ldr	r1, [pc, #88]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367e:	4b12      	ldr	r3, [pc, #72]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	490e      	ldr	r1, [pc, #56]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003692:	f000 f855 	bl	8003740 <HAL_RCC_GetSysClockFreq>
 8003696:	4602      	mov	r2, r0
 8003698:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	490a      	ldr	r1, [pc, #40]	@ (80036cc <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	5ccb      	ldrb	r3, [r1, r3]
 80036a6:	fa22 f303 	lsr.w	r3, r2, r3
 80036aa:	4a09      	ldr	r2, [pc, #36]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ae:	4b09      	ldr	r3, [pc, #36]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe fa0c 	bl	8001ad0 <HAL_InitTick>

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023c00 	.word	0x40023c00
 80036c8:	40023800 	.word	0x40023800
 80036cc:	080061fc 	.word	0x080061fc
 80036d0:	20000328 	.word	0x20000328
 80036d4:	2000032c 	.word	0x2000032c

080036d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036dc:	4b03      	ldr	r3, [pc, #12]	@ (80036ec <HAL_RCC_GetHCLKFreq+0x14>)
 80036de:	681b      	ldr	r3, [r3, #0]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000328 	.word	0x20000328

080036f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036f4:	f7ff fff0 	bl	80036d8 <HAL_RCC_GetHCLKFreq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	0a9b      	lsrs	r3, r3, #10
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	4903      	ldr	r1, [pc, #12]	@ (8003714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003706:	5ccb      	ldrb	r3, [r1, r3]
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40023800 	.word	0x40023800
 8003714:	0800620c 	.word	0x0800620c

08003718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800371c:	f7ff ffdc 	bl	80036d8 <HAL_RCC_GetHCLKFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	0b5b      	lsrs	r3, r3, #13
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4903      	ldr	r1, [pc, #12]	@ (800373c <HAL_RCC_GetPCLK2Freq+0x24>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003734:	4618      	mov	r0, r3
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40023800 	.word	0x40023800
 800373c:	0800620c 	.word	0x0800620c

08003740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003744:	b0ae      	sub	sp, #184	@ 0xb8
 8003746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003766:	4bcb      	ldr	r3, [pc, #812]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x354>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b0c      	cmp	r3, #12
 8003770:	f200 8206 	bhi.w	8003b80 <HAL_RCC_GetSysClockFreq+0x440>
 8003774:	a201      	add	r2, pc, #4	@ (adr r2, 800377c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	080037b1 	.word	0x080037b1
 8003780:	08003b81 	.word	0x08003b81
 8003784:	08003b81 	.word	0x08003b81
 8003788:	08003b81 	.word	0x08003b81
 800378c:	080037b9 	.word	0x080037b9
 8003790:	08003b81 	.word	0x08003b81
 8003794:	08003b81 	.word	0x08003b81
 8003798:	08003b81 	.word	0x08003b81
 800379c:	080037c1 	.word	0x080037c1
 80037a0:	08003b81 	.word	0x08003b81
 80037a4:	08003b81 	.word	0x08003b81
 80037a8:	08003b81 	.word	0x08003b81
 80037ac:	080039b1 	.word	0x080039b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b0:	4bb9      	ldr	r3, [pc, #740]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x358>)
 80037b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80037b6:	e1e7      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037b8:	4bb8      	ldr	r3, [pc, #736]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x35c>)
 80037ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037be:	e1e3      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c0:	4bb4      	ldr	r3, [pc, #720]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037cc:	4bb1      	ldr	r3, [pc, #708]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d071      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d8:	4bae      	ldr	r3, [pc, #696]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	099b      	lsrs	r3, r3, #6
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037e4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80037e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037f4:	2300      	movs	r3, #0
 80037f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037fe:	4622      	mov	r2, r4
 8003800:	462b      	mov	r3, r5
 8003802:	f04f 0000 	mov.w	r0, #0
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	0159      	lsls	r1, r3, #5
 800380c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003810:	0150      	lsls	r0, r2, #5
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4621      	mov	r1, r4
 8003818:	1a51      	subs	r1, r2, r1
 800381a:	6439      	str	r1, [r7, #64]	@ 0x40
 800381c:	4629      	mov	r1, r5
 800381e:	eb63 0301 	sbc.w	r3, r3, r1
 8003822:	647b      	str	r3, [r7, #68]	@ 0x44
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003830:	4649      	mov	r1, r9
 8003832:	018b      	lsls	r3, r1, #6
 8003834:	4641      	mov	r1, r8
 8003836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383a:	4641      	mov	r1, r8
 800383c:	018a      	lsls	r2, r1, #6
 800383e:	4641      	mov	r1, r8
 8003840:	1a51      	subs	r1, r2, r1
 8003842:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003844:	4649      	mov	r1, r9
 8003846:	eb63 0301 	sbc.w	r3, r3, r1
 800384a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003858:	4649      	mov	r1, r9
 800385a:	00cb      	lsls	r3, r1, #3
 800385c:	4641      	mov	r1, r8
 800385e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003862:	4641      	mov	r1, r8
 8003864:	00ca      	lsls	r2, r1, #3
 8003866:	4610      	mov	r0, r2
 8003868:	4619      	mov	r1, r3
 800386a:	4603      	mov	r3, r0
 800386c:	4622      	mov	r2, r4
 800386e:	189b      	adds	r3, r3, r2
 8003870:	633b      	str	r3, [r7, #48]	@ 0x30
 8003872:	462b      	mov	r3, r5
 8003874:	460a      	mov	r2, r1
 8003876:	eb42 0303 	adc.w	r3, r2, r3
 800387a:	637b      	str	r3, [r7, #52]	@ 0x34
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003888:	4629      	mov	r1, r5
 800388a:	024b      	lsls	r3, r1, #9
 800388c:	4621      	mov	r1, r4
 800388e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003892:	4621      	mov	r1, r4
 8003894:	024a      	lsls	r2, r1, #9
 8003896:	4610      	mov	r0, r2
 8003898:	4619      	mov	r1, r3
 800389a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80038a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80038ac:	f7fc ffba 	bl	8000824 <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4613      	mov	r3, r2
 80038b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038ba:	e067      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038bc:	4b75      	ldr	r3, [pc, #468]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	099b      	lsrs	r3, r3, #6
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038c8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80038cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038d6:	2300      	movs	r3, #0
 80038d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80038de:	4622      	mov	r2, r4
 80038e0:	462b      	mov	r3, r5
 80038e2:	f04f 0000 	mov.w	r0, #0
 80038e6:	f04f 0100 	mov.w	r1, #0
 80038ea:	0159      	lsls	r1, r3, #5
 80038ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f0:	0150      	lsls	r0, r2, #5
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4621      	mov	r1, r4
 80038f8:	1a51      	subs	r1, r2, r1
 80038fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80038fc:	4629      	mov	r1, r5
 80038fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003910:	4649      	mov	r1, r9
 8003912:	018b      	lsls	r3, r1, #6
 8003914:	4641      	mov	r1, r8
 8003916:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800391a:	4641      	mov	r1, r8
 800391c:	018a      	lsls	r2, r1, #6
 800391e:	4641      	mov	r1, r8
 8003920:	ebb2 0a01 	subs.w	sl, r2, r1
 8003924:	4649      	mov	r1, r9
 8003926:	eb63 0b01 	sbc.w	fp, r3, r1
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003936:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800393a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800393e:	4692      	mov	sl, r2
 8003940:	469b      	mov	fp, r3
 8003942:	4623      	mov	r3, r4
 8003944:	eb1a 0303 	adds.w	r3, sl, r3
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	462b      	mov	r3, r5
 800394c:	eb4b 0303 	adc.w	r3, fp, r3
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800395e:	4629      	mov	r1, r5
 8003960:	028b      	lsls	r3, r1, #10
 8003962:	4621      	mov	r1, r4
 8003964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003968:	4621      	mov	r1, r4
 800396a:	028a      	lsls	r2, r1, #10
 800396c:	4610      	mov	r0, r2
 800396e:	4619      	mov	r1, r3
 8003970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003974:	2200      	movs	r2, #0
 8003976:	673b      	str	r3, [r7, #112]	@ 0x70
 8003978:	677a      	str	r2, [r7, #116]	@ 0x74
 800397a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800397e:	f7fc ff51 	bl	8000824 <__aeabi_uldivmod>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4613      	mov	r3, r2
 8003988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800398c:	4b41      	ldr	r3, [pc, #260]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x354>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	3301      	adds	r3, #1
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800399e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039ae:	e0eb      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b0:	4b38      	ldr	r3, [pc, #224]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039bc:	4b35      	ldr	r3, [pc, #212]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d06b      	beq.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c8:	4b32      	ldr	r3, [pc, #200]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	2200      	movs	r2, #0
 80039d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039da:	663b      	str	r3, [r7, #96]	@ 0x60
 80039dc:	2300      	movs	r3, #0
 80039de:	667b      	str	r3, [r7, #100]	@ 0x64
 80039e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80039e4:	4622      	mov	r2, r4
 80039e6:	462b      	mov	r3, r5
 80039e8:	f04f 0000 	mov.w	r0, #0
 80039ec:	f04f 0100 	mov.w	r1, #0
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039f6:	0150      	lsls	r0, r2, #5
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4621      	mov	r1, r4
 80039fe:	1a51      	subs	r1, r2, r1
 8003a00:	61b9      	str	r1, [r7, #24]
 8003a02:	4629      	mov	r1, r5
 8003a04:	eb63 0301 	sbc.w	r3, r3, r1
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003a16:	4659      	mov	r1, fp
 8003a18:	018b      	lsls	r3, r1, #6
 8003a1a:	4651      	mov	r1, sl
 8003a1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a20:	4651      	mov	r1, sl
 8003a22:	018a      	lsls	r2, r1, #6
 8003a24:	4651      	mov	r1, sl
 8003a26:	ebb2 0801 	subs.w	r8, r2, r1
 8003a2a:	4659      	mov	r1, fp
 8003a2c:	eb63 0901 	sbc.w	r9, r3, r1
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a44:	4690      	mov	r8, r2
 8003a46:	4699      	mov	r9, r3
 8003a48:	4623      	mov	r3, r4
 8003a4a:	eb18 0303 	adds.w	r3, r8, r3
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	462b      	mov	r3, r5
 8003a52:	eb49 0303 	adc.w	r3, r9, r3
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a64:	4629      	mov	r1, r5
 8003a66:	024b      	lsls	r3, r1, #9
 8003a68:	4621      	mov	r1, r4
 8003a6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a6e:	4621      	mov	r1, r4
 8003a70:	024a      	lsls	r2, r1, #9
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a7e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a84:	f7fc fece 	bl	8000824 <__aeabi_uldivmod>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a92:	e065      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x420>
 8003a94:	40023800 	.word	0x40023800
 8003a98:	00f42400 	.word	0x00f42400
 8003a9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x458>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	099b      	lsrs	r3, r3, #6
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	4611      	mov	r1, r2
 8003aac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ab0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ab6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003aba:	4642      	mov	r2, r8
 8003abc:	464b      	mov	r3, r9
 8003abe:	f04f 0000 	mov.w	r0, #0
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	0159      	lsls	r1, r3, #5
 8003ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003acc:	0150      	lsls	r0, r2, #5
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4641      	mov	r1, r8
 8003ad4:	1a51      	subs	r1, r2, r1
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	4649      	mov	r1, r9
 8003ada:	eb63 0301 	sbc.w	r3, r3, r1
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003aec:	4659      	mov	r1, fp
 8003aee:	018b      	lsls	r3, r1, #6
 8003af0:	4651      	mov	r1, sl
 8003af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003af6:	4651      	mov	r1, sl
 8003af8:	018a      	lsls	r2, r1, #6
 8003afa:	4651      	mov	r1, sl
 8003afc:	1a54      	subs	r4, r2, r1
 8003afe:	4659      	mov	r1, fp
 8003b00:	eb63 0501 	sbc.w	r5, r3, r1
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	00eb      	lsls	r3, r5, #3
 8003b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b12:	00e2      	lsls	r2, r4, #3
 8003b14:	4614      	mov	r4, r2
 8003b16:	461d      	mov	r5, r3
 8003b18:	4643      	mov	r3, r8
 8003b1a:	18e3      	adds	r3, r4, r3
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	464b      	mov	r3, r9
 8003b20:	eb45 0303 	adc.w	r3, r5, r3
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b32:	4629      	mov	r1, r5
 8003b34:	028b      	lsls	r3, r1, #10
 8003b36:	4621      	mov	r1, r4
 8003b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	028a      	lsls	r2, r1, #10
 8003b40:	4610      	mov	r0, r2
 8003b42:	4619      	mov	r1, r3
 8003b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b48:	2200      	movs	r2, #0
 8003b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b4c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003b4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b52:	f7fc fe67 	bl	8000824 <__aeabi_uldivmod>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b60:	4b0d      	ldr	r3, [pc, #52]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0f1b      	lsrs	r3, r3, #28
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003b6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b7e:	e003      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	37b8      	adds	r7, #184	@ 0xb8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	00f42400 	.word	0x00f42400

08003ba0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e28d      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8083 	beq.w	8003cc6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bc0:	4b94      	ldr	r3, [pc, #592]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d019      	beq.n	8003c00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bcc:	4b91      	ldr	r3, [pc, #580]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bd8:	4b8e      	ldr	r3, [pc, #568]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003be0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003be4:	d00c      	beq.n	8003c00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be6:	4b8b      	ldr	r3, [pc, #556]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d112      	bne.n	8003c18 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bf2:	4b88      	ldr	r3, [pc, #544]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bfe:	d10b      	bne.n	8003c18 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	4b84      	ldr	r3, [pc, #528]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d05b      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x124>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d157      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e25a      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c20:	d106      	bne.n	8003c30 <HAL_RCC_OscConfig+0x90>
 8003c22:	4b7c      	ldr	r3, [pc, #496]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7b      	ldr	r2, [pc, #492]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e01d      	b.n	8003c6c <HAL_RCC_OscConfig+0xcc>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCC_OscConfig+0xb4>
 8003c3a:	4b76      	ldr	r3, [pc, #472]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a75      	ldr	r2, [pc, #468]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	4b73      	ldr	r3, [pc, #460]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a72      	ldr	r2, [pc, #456]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e00b      	b.n	8003c6c <HAL_RCC_OscConfig+0xcc>
 8003c54:	4b6f      	ldr	r3, [pc, #444]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a6e      	ldr	r2, [pc, #440]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4b6c      	ldr	r3, [pc, #432]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a6b      	ldr	r2, [pc, #428]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d013      	beq.n	8003c9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fd ff70 	bl	8001b58 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fd ff6c 	bl	8001b58 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	@ 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e21f      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	4b61      	ldr	r3, [pc, #388]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0xdc>
 8003c9a:	e014      	b.n	8003cc6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fd ff5c 	bl	8001b58 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca4:	f7fd ff58 	bl	8001b58 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	@ 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e20b      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	4b57      	ldr	r3, [pc, #348]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x104>
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d06f      	beq.n	8003db2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cd2:	4b50      	ldr	r3, [pc, #320]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d017      	beq.n	8003d0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cde:	4b4d      	ldr	r3, [pc, #308]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d105      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cea:	4b4a      	ldr	r3, [pc, #296]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf6:	4b47      	ldr	r3, [pc, #284]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cfe:	2b0c      	cmp	r3, #12
 8003d00:	d11c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d02:	4b44      	ldr	r3, [pc, #272]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d116      	bne.n	8003d3c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0e:	4b41      	ldr	r3, [pc, #260]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_RCC_OscConfig+0x186>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d001      	beq.n	8003d26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e1d3      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	4b3b      	ldr	r3, [pc, #236]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4937      	ldr	r1, [pc, #220]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3a:	e03a      	b.n	8003db2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d020      	beq.n	8003d86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d44:	4b34      	ldr	r3, [pc, #208]	@ (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fd ff05 	bl	8001b58 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d52:	f7fd ff01 	bl	8001b58 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e1b4      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d64:	4b2b      	ldr	r3, [pc, #172]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d70:	4b28      	ldr	r3, [pc, #160]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4925      	ldr	r1, [pc, #148]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	600b      	str	r3, [r1, #0]
 8003d84:	e015      	b.n	8003db2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d86:	4b24      	ldr	r3, [pc, #144]	@ (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fd fee4 	bl	8001b58 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d94:	f7fd fee0 	bl	8001b58 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e193      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d036      	beq.n	8003e2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d016      	beq.n	8003df4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc6:	4b15      	ldr	r3, [pc, #84]	@ (8003e1c <HAL_RCC_OscConfig+0x27c>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dcc:	f7fd fec4 	bl	8001b58 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd4:	f7fd fec0 	bl	8001b58 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e173      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x234>
 8003df2:	e01b      	b.n	8003e2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df4:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <HAL_RCC_OscConfig+0x27c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfa:	f7fd fead 	bl	8001b58 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e00:	e00e      	b.n	8003e20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e02:	f7fd fea9 	bl	8001b58 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d907      	bls.n	8003e20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e15c      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
 8003e14:	40023800 	.word	0x40023800
 8003e18:	42470000 	.word	0x42470000
 8003e1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e20:	4b8a      	ldr	r3, [pc, #552]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ea      	bne.n	8003e02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8097 	beq.w	8003f68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3e:	4b83      	ldr	r3, [pc, #524]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10f      	bne.n	8003e6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	4a7e      	ldr	r2, [pc, #504]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6a:	4b79      	ldr	r3, [pc, #484]	@ (8004050 <HAL_RCC_OscConfig+0x4b0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d118      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e76:	4b76      	ldr	r3, [pc, #472]	@ (8004050 <HAL_RCC_OscConfig+0x4b0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a75      	ldr	r2, [pc, #468]	@ (8004050 <HAL_RCC_OscConfig+0x4b0>)
 8003e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e82:	f7fd fe69 	bl	8001b58 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8a:	f7fd fe65 	bl	8001b58 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e118      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9c:	4b6c      	ldr	r3, [pc, #432]	@ (8004050 <HAL_RCC_OscConfig+0x4b0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d106      	bne.n	8003ebe <HAL_RCC_OscConfig+0x31e>
 8003eb0:	4b66      	ldr	r3, [pc, #408]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb4:	4a65      	ldr	r2, [pc, #404]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ebc:	e01c      	b.n	8003ef8 <HAL_RCC_OscConfig+0x358>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b05      	cmp	r3, #5
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x340>
 8003ec6:	4b61      	ldr	r3, [pc, #388]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eca:	4a60      	ldr	r2, [pc, #384]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003ecc:	f043 0304 	orr.w	r3, r3, #4
 8003ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ed2:	4b5e      	ldr	r3, [pc, #376]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed6:	4a5d      	ldr	r2, [pc, #372]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ede:	e00b      	b.n	8003ef8 <HAL_RCC_OscConfig+0x358>
 8003ee0:	4b5a      	ldr	r3, [pc, #360]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee4:	4a59      	ldr	r2, [pc, #356]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eec:	4b57      	ldr	r3, [pc, #348]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef0:	4a56      	ldr	r2, [pc, #344]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003ef2:	f023 0304 	bic.w	r3, r3, #4
 8003ef6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d015      	beq.n	8003f2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fd fe2a 	bl	8001b58 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f06:	e00a      	b.n	8003f1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f08:	f7fd fe26 	bl	8001b58 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e0d7      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0ee      	beq.n	8003f08 <HAL_RCC_OscConfig+0x368>
 8003f2a:	e014      	b.n	8003f56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2c:	f7fd fe14 	bl	8001b58 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f34:	f7fd fe10 	bl	8001b58 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e0c1      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4a:	4b40      	ldr	r3, [pc, #256]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1ee      	bne.n	8003f34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d105      	bne.n	8003f68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	4a3a      	ldr	r2, [pc, #232]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80ad 	beq.w	80040cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f72:	4b36      	ldr	r3, [pc, #216]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d060      	beq.n	8004040 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d145      	bne.n	8004012 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f86:	4b33      	ldr	r3, [pc, #204]	@ (8004054 <HAL_RCC_OscConfig+0x4b4>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fd fde4 	bl	8001b58 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f94:	f7fd fde0 	bl	8001b58 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e093      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa6:	4b29      	ldr	r3, [pc, #164]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69da      	ldr	r2, [r3, #28]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	019b      	lsls	r3, r3, #6
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	041b      	lsls	r3, r3, #16
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	061b      	lsls	r3, r3, #24
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fdc:	071b      	lsls	r3, r3, #28
 8003fde:	491b      	ldr	r1, [pc, #108]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <HAL_RCC_OscConfig+0x4b4>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fd fdb5 	bl	8001b58 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff2:	f7fd fdb1 	bl	8001b58 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e064      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004004:	4b11      	ldr	r3, [pc, #68]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x452>
 8004010:	e05c      	b.n	80040cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <HAL_RCC_OscConfig+0x4b4>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fd fd9e 	bl	8001b58 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd fd9a 	bl	8001b58 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e04d      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	4b06      	ldr	r3, [pc, #24]	@ (800404c <HAL_RCC_OscConfig+0x4ac>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x480>
 800403e:	e045      	b.n	80040cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e040      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
 800404c:	40023800 	.word	0x40023800
 8004050:	40007000 	.word	0x40007000
 8004054:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004058:	4b1f      	ldr	r3, [pc, #124]	@ (80040d8 <HAL_RCC_OscConfig+0x538>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d030      	beq.n	80040c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d129      	bne.n	80040c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d122      	bne.n	80040c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004088:	4013      	ands	r3, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800408e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004090:	4293      	cmp	r3, r2
 8004092:	d119      	bne.n	80040c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	3b01      	subs	r3, #1
 80040a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d10f      	bne.n	80040c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40023800 	.word	0x40023800

080040dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e041      	b.n	8004172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fd fb12 	bl	800172c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3304      	adds	r3, #4
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f000 fa72 	bl	8004604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e041      	b.n	8004210 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d106      	bne.n	80041a6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f839 	bl	8004218 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3304      	adds	r3, #4
 80041b6:	4619      	mov	r1, r3
 80041b8:	4610      	mov	r0, r2
 80041ba:	f000 fa23 	bl	8004604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_TIM_OC_Start+0x24>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e022      	b.n	8004296 <HAL_TIM_OC_Start+0x6a>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b04      	cmp	r3, #4
 8004254:	d109      	bne.n	800426a <HAL_TIM_OC_Start+0x3e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	e015      	b.n	8004296 <HAL_TIM_OC_Start+0x6a>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d109      	bne.n	8004284 <HAL_TIM_OC_Start+0x58>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e008      	b.n	8004296 <HAL_TIM_OC_Start+0x6a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e07c      	b.n	8004398 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_OC_Start+0x82>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042ac:	e013      	b.n	80042d6 <HAL_TIM_OC_Start+0xaa>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d104      	bne.n	80042be <HAL_TIM_OC_Start+0x92>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042bc:	e00b      	b.n	80042d6 <HAL_TIM_OC_Start+0xaa>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_OC_Start+0xa2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042cc:	e003      	b.n	80042d6 <HAL_TIM_OC_Start+0xaa>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2202      	movs	r2, #2
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2201      	movs	r2, #1
 80042dc:	6839      	ldr	r1, [r7, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fc86 	bl	8004bf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2d      	ldr	r2, [pc, #180]	@ (80043a0 <HAL_TIM_OC_Start+0x174>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_TIM_OC_Start+0xcc>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2c      	ldr	r2, [pc, #176]	@ (80043a4 <HAL_TIM_OC_Start+0x178>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d101      	bne.n	80042fc <HAL_TIM_OC_Start+0xd0>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <HAL_TIM_OC_Start+0xd2>
 80042fc:	2300      	movs	r3, #0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004310:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a22      	ldr	r2, [pc, #136]	@ (80043a0 <HAL_TIM_OC_Start+0x174>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d022      	beq.n	8004362 <HAL_TIM_OC_Start+0x136>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004324:	d01d      	beq.n	8004362 <HAL_TIM_OC_Start+0x136>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1f      	ldr	r2, [pc, #124]	@ (80043a8 <HAL_TIM_OC_Start+0x17c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d018      	beq.n	8004362 <HAL_TIM_OC_Start+0x136>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <HAL_TIM_OC_Start+0x180>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <HAL_TIM_OC_Start+0x136>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1c      	ldr	r2, [pc, #112]	@ (80043b0 <HAL_TIM_OC_Start+0x184>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00e      	beq.n	8004362 <HAL_TIM_OC_Start+0x136>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a16      	ldr	r2, [pc, #88]	@ (80043a4 <HAL_TIM_OC_Start+0x178>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_TIM_OC_Start+0x136>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a18      	ldr	r2, [pc, #96]	@ (80043b4 <HAL_TIM_OC_Start+0x188>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_TIM_OC_Start+0x136>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a16      	ldr	r2, [pc, #88]	@ (80043b8 <HAL_TIM_OC_Start+0x18c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d111      	bne.n	8004386 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b06      	cmp	r3, #6
 8004372:	d010      	beq.n	8004396 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004384:	e007      	b.n	8004396 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0201 	orr.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40010000 	.word	0x40010000
 80043a4:	40010400 	.word	0x40010400
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40000c00 	.word	0x40000c00
 80043b4:	40014000 	.word	0x40014000
 80043b8:	40001800 	.word	0x40001800

080043bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_TIM_OC_ConfigChannel+0x1e>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e048      	b.n	800446c <HAL_TIM_OC_ConfigChannel+0xb0>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	d839      	bhi.n	800445c <HAL_TIM_OC_ConfigChannel+0xa0>
 80043e8:	a201      	add	r2, pc, #4	@ (adr r2, 80043f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004425 	.word	0x08004425
 80043f4:	0800445d 	.word	0x0800445d
 80043f8:	0800445d 	.word	0x0800445d
 80043fc:	0800445d 	.word	0x0800445d
 8004400:	08004433 	.word	0x08004433
 8004404:	0800445d 	.word	0x0800445d
 8004408:	0800445d 	.word	0x0800445d
 800440c:	0800445d 	.word	0x0800445d
 8004410:	08004441 	.word	0x08004441
 8004414:	0800445d 	.word	0x0800445d
 8004418:	0800445d 	.word	0x0800445d
 800441c:	0800445d 	.word	0x0800445d
 8004420:	0800444f 	.word	0x0800444f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f996 	bl	800475c <TIM_OC1_SetConfig>
      break;
 8004430:	e017      	b.n	8004462 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	4618      	mov	r0, r3
 800443a:	f000 f9ff 	bl	800483c <TIM_OC2_SetConfig>
      break;
 800443e:	e010      	b.n	8004462 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fa6e 	bl	8004928 <TIM_OC3_SetConfig>
      break;
 800444c:	e009      	b.n	8004462 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fadb 	bl	8004a10 <TIM_OC4_SetConfig>
      break;
 800445a:	e002      	b.n	8004462 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	75fb      	strb	r3, [r7, #23]
      break;
 8004460:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800446a:	7dfb      	ldrb	r3, [r7, #23]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_TIM_ConfigClockSource+0x1c>
 800448c:	2302      	movs	r3, #2
 800448e:	e0b4      	b.n	80045fa <HAL_TIM_ConfigClockSource+0x186>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c8:	d03e      	beq.n	8004548 <HAL_TIM_ConfigClockSource+0xd4>
 80044ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ce:	f200 8087 	bhi.w	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 80044d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d6:	f000 8086 	beq.w	80045e6 <HAL_TIM_ConfigClockSource+0x172>
 80044da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044de:	d87f      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 80044e0:	2b70      	cmp	r3, #112	@ 0x70
 80044e2:	d01a      	beq.n	800451a <HAL_TIM_ConfigClockSource+0xa6>
 80044e4:	2b70      	cmp	r3, #112	@ 0x70
 80044e6:	d87b      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 80044e8:	2b60      	cmp	r3, #96	@ 0x60
 80044ea:	d050      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x11a>
 80044ec:	2b60      	cmp	r3, #96	@ 0x60
 80044ee:	d877      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 80044f0:	2b50      	cmp	r3, #80	@ 0x50
 80044f2:	d03c      	beq.n	800456e <HAL_TIM_ConfigClockSource+0xfa>
 80044f4:	2b50      	cmp	r3, #80	@ 0x50
 80044f6:	d873      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 80044f8:	2b40      	cmp	r3, #64	@ 0x40
 80044fa:	d058      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x13a>
 80044fc:	2b40      	cmp	r3, #64	@ 0x40
 80044fe:	d86f      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004500:	2b30      	cmp	r3, #48	@ 0x30
 8004502:	d064      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x15a>
 8004504:	2b30      	cmp	r3, #48	@ 0x30
 8004506:	d86b      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004508:	2b20      	cmp	r3, #32
 800450a:	d060      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x15a>
 800450c:	2b20      	cmp	r3, #32
 800450e:	d867      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d05c      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x15a>
 8004514:	2b10      	cmp	r3, #16
 8004516:	d05a      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x15a>
 8004518:	e062      	b.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800452a:	f000 fb41 	bl	8004bb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800453c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	609a      	str	r2, [r3, #8]
      break;
 8004546:	e04f      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004558:	f000 fb2a 	bl	8004bb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800456a:	609a      	str	r2, [r3, #8]
      break;
 800456c:	e03c      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800457a:	461a      	mov	r2, r3
 800457c:	f000 fa9e 	bl	8004abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2150      	movs	r1, #80	@ 0x50
 8004586:	4618      	mov	r0, r3
 8004588:	f000 faf7 	bl	8004b7a <TIM_ITRx_SetConfig>
      break;
 800458c:	e02c      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800459a:	461a      	mov	r2, r3
 800459c:	f000 fabd 	bl	8004b1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2160      	movs	r1, #96	@ 0x60
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fae7 	bl	8004b7a <TIM_ITRx_SetConfig>
      break;
 80045ac:	e01c      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ba:	461a      	mov	r2, r3
 80045bc:	f000 fa7e 	bl	8004abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2140      	movs	r1, #64	@ 0x40
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fad7 	bl	8004b7a <TIM_ITRx_SetConfig>
      break;
 80045cc:	e00c      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f000 face 	bl	8004b7a <TIM_ITRx_SetConfig>
      break;
 80045de:	e003      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
      break;
 80045e4:	e000      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a46      	ldr	r2, [pc, #280]	@ (8004730 <TIM_Base_SetConfig+0x12c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004622:	d00f      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a43      	ldr	r2, [pc, #268]	@ (8004734 <TIM_Base_SetConfig+0x130>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00b      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a42      	ldr	r2, [pc, #264]	@ (8004738 <TIM_Base_SetConfig+0x134>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d007      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a41      	ldr	r2, [pc, #260]	@ (800473c <TIM_Base_SetConfig+0x138>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a40      	ldr	r2, [pc, #256]	@ (8004740 <TIM_Base_SetConfig+0x13c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d108      	bne.n	8004656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800464a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a35      	ldr	r2, [pc, #212]	@ (8004730 <TIM_Base_SetConfig+0x12c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d02b      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004664:	d027      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a32      	ldr	r2, [pc, #200]	@ (8004734 <TIM_Base_SetConfig+0x130>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d023      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a31      	ldr	r2, [pc, #196]	@ (8004738 <TIM_Base_SetConfig+0x134>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01f      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a30      	ldr	r2, [pc, #192]	@ (800473c <TIM_Base_SetConfig+0x138>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01b      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a2f      	ldr	r2, [pc, #188]	@ (8004740 <TIM_Base_SetConfig+0x13c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d017      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a2e      	ldr	r2, [pc, #184]	@ (8004744 <TIM_Base_SetConfig+0x140>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a2d      	ldr	r2, [pc, #180]	@ (8004748 <TIM_Base_SetConfig+0x144>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00f      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a2c      	ldr	r2, [pc, #176]	@ (800474c <TIM_Base_SetConfig+0x148>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00b      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004750 <TIM_Base_SetConfig+0x14c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d007      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004754 <TIM_Base_SetConfig+0x150>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d003      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a29      	ldr	r2, [pc, #164]	@ (8004758 <TIM_Base_SetConfig+0x154>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d108      	bne.n	80046c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a10      	ldr	r2, [pc, #64]	@ (8004730 <TIM_Base_SetConfig+0x12c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <TIM_Base_SetConfig+0xf8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a12      	ldr	r2, [pc, #72]	@ (8004740 <TIM_Base_SetConfig+0x13c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d103      	bne.n	8004704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d105      	bne.n	8004722 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	611a      	str	r2, [r3, #16]
  }
}
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40010000 	.word	0x40010000
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800
 800473c:	40000c00 	.word	0x40000c00
 8004740:	40010400 	.word	0x40010400
 8004744:	40014000 	.word	0x40014000
 8004748:	40014400 	.word	0x40014400
 800474c:	40014800 	.word	0x40014800
 8004750:	40001800 	.word	0x40001800
 8004754:	40001c00 	.word	0x40001c00
 8004758:	40002000 	.word	0x40002000

0800475c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f023 0201 	bic.w	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0303 	bic.w	r3, r3, #3
 8004792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 0302 	bic.w	r3, r3, #2
 80047a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a20      	ldr	r2, [pc, #128]	@ (8004834 <TIM_OC1_SetConfig+0xd8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <TIM_OC1_SetConfig+0x64>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004838 <TIM_OC1_SetConfig+0xdc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d10c      	bne.n	80047da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f023 0308 	bic.w	r3, r3, #8
 80047c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f023 0304 	bic.w	r3, r3, #4
 80047d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a15      	ldr	r2, [pc, #84]	@ (8004834 <TIM_OC1_SetConfig+0xd8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d003      	beq.n	80047ea <TIM_OC1_SetConfig+0x8e>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a14      	ldr	r2, [pc, #80]	@ (8004838 <TIM_OC1_SetConfig+0xdc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d111      	bne.n	800480e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	621a      	str	r2, [r3, #32]
}
 8004828:	bf00      	nop
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	40010000 	.word	0x40010000
 8004838:	40010400 	.word	0x40010400

0800483c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f023 0210 	bic.w	r2, r3, #16
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800486a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f023 0320 	bic.w	r3, r3, #32
 8004886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a22      	ldr	r2, [pc, #136]	@ (8004920 <TIM_OC2_SetConfig+0xe4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d003      	beq.n	80048a4 <TIM_OC2_SetConfig+0x68>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a21      	ldr	r2, [pc, #132]	@ (8004924 <TIM_OC2_SetConfig+0xe8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d10d      	bne.n	80048c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a17      	ldr	r2, [pc, #92]	@ (8004920 <TIM_OC2_SetConfig+0xe4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_OC2_SetConfig+0x94>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a16      	ldr	r2, [pc, #88]	@ (8004924 <TIM_OC2_SetConfig+0xe8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d113      	bne.n	80048f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	621a      	str	r2, [r3, #32]
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40010000 	.word	0x40010000
 8004924:	40010400 	.word	0x40010400

08004928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0303 	bic.w	r3, r3, #3
 800495e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a21      	ldr	r2, [pc, #132]	@ (8004a08 <TIM_OC3_SetConfig+0xe0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d003      	beq.n	800498e <TIM_OC3_SetConfig+0x66>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a20      	ldr	r2, [pc, #128]	@ (8004a0c <TIM_OC3_SetConfig+0xe4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d10d      	bne.n	80049aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a16      	ldr	r2, [pc, #88]	@ (8004a08 <TIM_OC3_SetConfig+0xe0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_OC3_SetConfig+0x92>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a15      	ldr	r2, [pc, #84]	@ (8004a0c <TIM_OC3_SetConfig+0xe4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d113      	bne.n	80049e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	621a      	str	r2, [r3, #32]
}
 80049fc:	bf00      	nop
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40010400 	.word	0x40010400

08004a10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	031b      	lsls	r3, r3, #12
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a12      	ldr	r2, [pc, #72]	@ (8004ab4 <TIM_OC4_SetConfig+0xa4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC4_SetConfig+0x68>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a11      	ldr	r2, [pc, #68]	@ (8004ab8 <TIM_OC4_SetConfig+0xa8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d109      	bne.n	8004a8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	019b      	lsls	r3, r3, #6
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	621a      	str	r2, [r3, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40010400 	.word	0x40010400

08004abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f023 0201 	bic.w	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f023 030a 	bic.w	r3, r3, #10
 8004af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b087      	sub	sp, #28
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f023 0210 	bic.w	r2, r3, #16
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	031b      	lsls	r3, r3, #12
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f043 0307 	orr.w	r3, r3, #7
 8004b9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	609a      	str	r2, [r3, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	021a      	lsls	r2, r3, #8
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	609a      	str	r2, [r3, #8]
}
 8004be4:	bf00      	nop
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f003 031f 	and.w	r3, r3, #31
 8004c02:	2201      	movs	r2, #1
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a1a      	ldr	r2, [r3, #32]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	401a      	ands	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a1a      	ldr	r2, [r3, #32]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	fa01 f303 	lsl.w	r3, r1, r3
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	621a      	str	r2, [r3, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e05a      	b.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a21      	ldr	r2, [pc, #132]	@ (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca0:	d01d      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d018      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1a      	ldr	r2, [pc, #104]	@ (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a18      	ldr	r2, [pc, #96]	@ (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a17      	ldr	r2, [pc, #92]	@ (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a15      	ldr	r2, [pc, #84]	@ (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40000c00 	.word	0x40000c00
 8004d28:	40010400 	.word	0x40010400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40001800 	.word	0x40001800

08004d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e042      	b.n	8004dcc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fc fd80 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2224      	movs	r2, #36	@ 0x24
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fdcb 	bl	8005914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695a      	ldr	r2, [r3, #20]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08c      	sub	sp, #48	@ 0x30
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	4613      	mov	r3, r2
 8004de0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d156      	bne.n	8004e9c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <HAL_UART_Transmit_DMA+0x26>
 8004df4:	88fb      	ldrh	r3, [r7, #6]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e04f      	b.n	8004e9e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	88fa      	ldrh	r2, [r7, #6]
 8004e08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	88fa      	ldrh	r2, [r7, #6]
 8004e0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2221      	movs	r2, #33	@ 0x21
 8004e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e22:	4a21      	ldr	r2, [pc, #132]	@ (8004ea8 <HAL_UART_Transmit_DMA+0xd4>)
 8004e24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2a:	4a20      	ldr	r2, [pc, #128]	@ (8004eac <HAL_UART_Transmit_DMA+0xd8>)
 8004e2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e32:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb0 <HAL_UART_Transmit_DMA+0xdc>)
 8004e34:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004e3e:	f107 0308 	add.w	r3, r7, #8
 8004e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4a:	6819      	ldr	r1, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3304      	adds	r3, #4
 8004e52:	461a      	mov	r2, r3
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	f7fd fe3f 	bl	8002ad8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e62:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3314      	adds	r3, #20
 8004e6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	617b      	str	r3, [r7, #20]
   return(result);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3314      	adds	r3, #20
 8004e82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e84:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6a39      	ldr	r1, [r7, #32]
 8004e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e5      	bne.n	8004e64 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004e9c:	2302      	movs	r3, #2
  }
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3730      	adds	r7, #48	@ 0x30
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	08005441 	.word	0x08005441
 8004eac:	080054db 	.word	0x080054db
 8004eb0:	080054f7 	.word	0x080054f7

08004eb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b0ba      	sub	sp, #232	@ 0xe8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10f      	bne.n	8004f1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_UART_IRQHandler+0x66>
 8004f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fc40 	bl	8005798 <UART_Receive_IT>
      return;
 8004f18:	e25b      	b.n	80053d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 80de 	beq.w	80050e0 <HAL_UART_IRQHandler+0x22c>
 8004f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80d1 	beq.w	80050e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <HAL_UART_IRQHandler+0xae>
 8004f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5a:	f043 0201 	orr.w	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <HAL_UART_IRQHandler+0xd2>
 8004f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7e:	f043 0202 	orr.w	r2, r3, #2
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <HAL_UART_IRQHandler+0xf6>
 8004f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa2:	f043 0204 	orr.w	r2, r3, #4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d011      	beq.n	8004fda <HAL_UART_IRQHandler+0x126>
 8004fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d105      	bne.n	8004fce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	f043 0208 	orr.w	r2, r3, #8
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 81f2 	beq.w	80053c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_UART_IRQHandler+0x14e>
 8004ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fbcb 	bl	8005798 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500c:	2b40      	cmp	r3, #64	@ 0x40
 800500e:	bf0c      	ite	eq
 8005010:	2301      	moveq	r3, #1
 8005012:	2300      	movne	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d103      	bne.n	800502e <HAL_UART_IRQHandler+0x17a>
 8005026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800502a:	2b00      	cmp	r3, #0
 800502c:	d04f      	beq.n	80050ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fad3 	bl	80055da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503e:	2b40      	cmp	r3, #64	@ 0x40
 8005040:	d141      	bne.n	80050c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3314      	adds	r3, #20
 8005048:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005058:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800505c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3314      	adds	r3, #20
 800506a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800506e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005072:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800507a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1d9      	bne.n	8005042 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d013      	beq.n	80050be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509a:	4a7e      	ldr	r2, [pc, #504]	@ (8005294 <HAL_UART_IRQHandler+0x3e0>)
 800509c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fd fde0 	bl	8002c68 <HAL_DMA_Abort_IT>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d016      	beq.n	80050dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050b8:	4610      	mov	r0, r2
 80050ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050bc:	e00e      	b.n	80050dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f9a8 	bl	8005414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c4:	e00a      	b.n	80050dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f9a4 	bl	8005414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050cc:	e006      	b.n	80050dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f9a0 	bl	8005414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80050da:	e175      	b.n	80053c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050dc:	bf00      	nop
    return;
 80050de:	e173      	b.n	80053c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	f040 814f 	bne.w	8005388 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 8148 	beq.w	8005388 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 8141 	beq.w	8005388 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	60bb      	str	r3, [r7, #8]
 800511a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005126:	2b40      	cmp	r3, #64	@ 0x40
 8005128:	f040 80b6 	bne.w	8005298 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005138:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8145 	beq.w	80053cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800514a:	429a      	cmp	r2, r3
 800514c:	f080 813e 	bcs.w	80053cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005156:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005162:	f000 8088 	beq.w	8005276 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800517c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005184:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	330c      	adds	r3, #12
 800518e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005192:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800519e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1d9      	bne.n	8005166 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3314      	adds	r3, #20
 80051b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3314      	adds	r3, #20
 80051d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80051da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80051de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80051e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e1      	bne.n	80051b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3314      	adds	r3, #20
 80051f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3314      	adds	r3, #20
 800520e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005212:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005214:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005218:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005220:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e3      	bne.n	80051ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800523e:	e853 3f00 	ldrex	r3, [r3]
 8005242:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005246:	f023 0310 	bic.w	r3, r3, #16
 800524a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	330c      	adds	r3, #12
 8005254:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005258:	65ba      	str	r2, [r7, #88]	@ 0x58
 800525a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800525e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e3      	bne.n	8005234 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005270:	4618      	mov	r0, r3
 8005272:	f7fd fc89 	bl	8002b88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005284:	b29b      	uxth	r3, r3
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	b29b      	uxth	r3, r3
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f8cb 	bl	8005428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005292:	e09b      	b.n	80053cc <HAL_UART_IRQHandler+0x518>
 8005294:	080056a1 	.word	0x080056a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 808e 	beq.w	80053d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80052b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 8089 	beq.w	80053d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80052e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80052e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e3      	bne.n	80052be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3314      	adds	r3, #20
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	623b      	str	r3, [r7, #32]
   return(result);
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	f023 0301 	bic.w	r3, r3, #1
 800530c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3314      	adds	r3, #20
 8005316:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800531a:	633a      	str	r2, [r7, #48]	@ 0x30
 800531c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e3      	bne.n	80052f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	330c      	adds	r3, #12
 8005342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	60fb      	str	r3, [r7, #12]
   return(result);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0310 	bic.w	r3, r3, #16
 8005352:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005360:	61fa      	str	r2, [r7, #28]
 8005362:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	69b9      	ldr	r1, [r7, #24]
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	617b      	str	r3, [r7, #20]
   return(result);
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e3      	bne.n	800533c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800537a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800537e:	4619      	mov	r1, r3
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f851 	bl	8005428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005386:	e023      	b.n	80053d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005390:	2b00      	cmp	r3, #0
 8005392:	d009      	beq.n	80053a8 <HAL_UART_IRQHandler+0x4f4>
 8005394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f991 	bl	80056c8 <UART_Transmit_IT>
    return;
 80053a6:	e014      	b.n	80053d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00e      	beq.n	80053d2 <HAL_UART_IRQHandler+0x51e>
 80053b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f9d1 	bl	8005768 <UART_EndTransmit_IT>
    return;
 80053c6:	e004      	b.n	80053d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80053c8:	bf00      	nop
 80053ca:	e002      	b.n	80053d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80053cc:	bf00      	nop
 80053ce:	e000      	b.n	80053d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80053d0:	bf00      	nop
  }
}
 80053d2:	37e8      	adds	r7, #232	@ 0xe8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b090      	sub	sp, #64	@ 0x40
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005458:	2b00      	cmp	r3, #0
 800545a:	d137      	bne.n	80054cc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800545c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800545e:	2200      	movs	r2, #0
 8005460:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3314      	adds	r3, #20
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	623b      	str	r3, [r7, #32]
   return(result);
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005478:	63bb      	str	r3, [r7, #56]	@ 0x38
 800547a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3314      	adds	r3, #20
 8005480:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005482:	633a      	str	r2, [r7, #48]	@ 0x30
 8005484:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e5      	bne.n	8005462 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	330c      	adds	r3, #12
 80054b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054b6:	61fa      	str	r2, [r7, #28]
 80054b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	69b9      	ldr	r1, [r7, #24]
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	617b      	str	r3, [r7, #20]
   return(result);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e5      	bne.n	8005496 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054ca:	e002      	b.n	80054d2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80054cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80054ce:	f7ff ff83 	bl	80053d8 <HAL_UART_TxCpltCallback>
}
 80054d2:	bf00      	nop
 80054d4:	3740      	adds	r7, #64	@ 0x40
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7ff ff7f 	bl	80053ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005506:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005512:	2b80      	cmp	r3, #128	@ 0x80
 8005514:	bf0c      	ite	eq
 8005516:	2301      	moveq	r3, #1
 8005518:	2300      	movne	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b21      	cmp	r3, #33	@ 0x21
 8005528:	d108      	bne.n	800553c <UART_DMAError+0x46>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2200      	movs	r2, #0
 8005534:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005536:	68b8      	ldr	r0, [r7, #8]
 8005538:	f000 f827 	bl	800558a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005546:	2b40      	cmp	r3, #64	@ 0x40
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b22      	cmp	r3, #34	@ 0x22
 800555c:	d108      	bne.n	8005570 <UART_DMAError+0x7a>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d005      	beq.n	8005570 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2200      	movs	r2, #0
 8005568:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800556a:	68b8      	ldr	r0, [r7, #8]
 800556c:	f000 f835 	bl	80055da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005574:	f043 0210 	orr.w	r2, r3, #16
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800557c:	68b8      	ldr	r0, [r7, #8]
 800557e:	f7ff ff49 	bl	8005414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005582:	bf00      	nop
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800558a:	b480      	push	{r7}
 800558c:	b089      	sub	sp, #36	@ 0x24
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	330c      	adds	r3, #12
 8005598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80055a8:	61fb      	str	r3, [r7, #28]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	330c      	adds	r3, #12
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	61ba      	str	r2, [r7, #24]
 80055b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6979      	ldr	r1, [r7, #20]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	613b      	str	r3, [r7, #16]
   return(result);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e5      	bne.n	8005592 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80055ce:	bf00      	nop
 80055d0:	3724      	adds	r7, #36	@ 0x24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055da:	b480      	push	{r7}
 80055dc:	b095      	sub	sp, #84	@ 0x54
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	330c      	adds	r3, #12
 80055e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	330c      	adds	r3, #12
 8005600:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005602:	643a      	str	r2, [r7, #64]	@ 0x40
 8005604:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005608:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3314      	adds	r3, #20
 800561c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	61fb      	str	r3, [r7, #28]
   return(result);
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	f023 0301 	bic.w	r3, r3, #1
 800562c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3314      	adds	r3, #20
 8005634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005638:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800563c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e5      	bne.n	8005616 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564e:	2b01      	cmp	r3, #1
 8005650:	d119      	bne.n	8005686 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	60bb      	str	r3, [r7, #8]
   return(result);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f023 0310 	bic.w	r3, r3, #16
 8005668:	647b      	str	r3, [r7, #68]	@ 0x44
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	330c      	adds	r3, #12
 8005670:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005672:	61ba      	str	r2, [r7, #24]
 8005674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	6979      	ldr	r1, [r7, #20]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	613b      	str	r3, [r7, #16]
   return(result);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e5      	bne.n	8005652 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005694:	bf00      	nop
 8005696:	3754      	adds	r7, #84	@ 0x54
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f7ff feaa 	bl	8005414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b21      	cmp	r3, #33	@ 0x21
 80056da:	d13e      	bne.n	800575a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e4:	d114      	bne.n	8005710 <UART_Transmit_IT+0x48>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d110      	bne.n	8005710 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005702:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	1c9a      	adds	r2, r3, #2
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	621a      	str	r2, [r3, #32]
 800570e:	e008      	b.n	8005722 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	1c59      	adds	r1, r3, #1
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6211      	str	r1, [r2, #32]
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29b      	uxth	r3, r3
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	4619      	mov	r1, r3
 8005730:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005744:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005754:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	e000      	b.n	800575c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800575a:	2302      	movs	r3, #2
  }
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800577e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff fe25 	bl	80053d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08c      	sub	sp, #48	@ 0x30
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b22      	cmp	r3, #34	@ 0x22
 80057aa:	f040 80ae 	bne.w	800590a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b6:	d117      	bne.n	80057e8 <UART_Receive_IT+0x50>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d113      	bne.n	80057e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e0:	1c9a      	adds	r2, r3, #2
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80057e6:	e026      	b.n	8005836 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fa:	d007      	beq.n	800580c <UART_Receive_IT+0x74>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <UART_Receive_IT+0x82>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	e008      	b.n	800582c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005826:	b2da      	uxtb	r2, r3
 8005828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800582a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29b      	uxth	r3, r3
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4619      	mov	r1, r3
 8005844:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005846:	2b00      	cmp	r3, #0
 8005848:	d15d      	bne.n	8005906 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0220 	bic.w	r2, r2, #32
 8005858:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005868:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588c:	2b01      	cmp	r3, #1
 800588e:	d135      	bne.n	80058fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	330c      	adds	r3, #12
 800589c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	613b      	str	r3, [r7, #16]
   return(result);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f023 0310 	bic.w	r3, r3, #16
 80058ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	330c      	adds	r3, #12
 80058b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b6:	623a      	str	r2, [r7, #32]
 80058b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	69f9      	ldr	r1, [r7, #28]
 80058bc:	6a3a      	ldr	r2, [r7, #32]
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e5      	bne.n	8005896 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d10a      	bne.n	80058ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff fd97 	bl	8005428 <HAL_UARTEx_RxEventCallback>
 80058fa:	e002      	b.n	8005902 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff fd7f 	bl	8005400 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e002      	b.n	800590c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e000      	b.n	800590c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800590a:	2302      	movs	r3, #2
  }
}
 800590c:	4618      	mov	r0, r3
 800590e:	3730      	adds	r7, #48	@ 0x30
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005918:	b0c0      	sub	sp, #256	@ 0x100
 800591a:	af00      	add	r7, sp, #0
 800591c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005930:	68d9      	ldr	r1, [r3, #12]
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	ea40 0301 	orr.w	r3, r0, r1
 800593c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800593e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	431a      	orrs	r2, r3
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	431a      	orrs	r2, r3
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800596c:	f021 010c 	bic.w	r1, r1, #12
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800597a:	430b      	orrs	r3, r1
 800597c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800597e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800598a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598e:	6999      	ldr	r1, [r3, #24]
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	ea40 0301 	orr.w	r3, r0, r1
 800599a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4b8f      	ldr	r3, [pc, #572]	@ (8005be0 <UART_SetConfig+0x2cc>)
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d005      	beq.n	80059b4 <UART_SetConfig+0xa0>
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4b8d      	ldr	r3, [pc, #564]	@ (8005be4 <UART_SetConfig+0x2d0>)
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d104      	bne.n	80059be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059b4:	f7fd feb0 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 80059b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059bc:	e003      	b.n	80059c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059be:	f7fd fe97 	bl	80036f0 <HAL_RCC_GetPCLK1Freq>
 80059c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059d0:	f040 810c 	bne.w	8005bec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059d8:	2200      	movs	r2, #0
 80059da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059e6:	4622      	mov	r2, r4
 80059e8:	462b      	mov	r3, r5
 80059ea:	1891      	adds	r1, r2, r2
 80059ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059ee:	415b      	adcs	r3, r3
 80059f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059f6:	4621      	mov	r1, r4
 80059f8:	eb12 0801 	adds.w	r8, r2, r1
 80059fc:	4629      	mov	r1, r5
 80059fe:	eb43 0901 	adc.w	r9, r3, r1
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a16:	4690      	mov	r8, r2
 8005a18:	4699      	mov	r9, r3
 8005a1a:	4623      	mov	r3, r4
 8005a1c:	eb18 0303 	adds.w	r3, r8, r3
 8005a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a24:	462b      	mov	r3, r5
 8005a26:	eb49 0303 	adc.w	r3, r9, r3
 8005a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a42:	460b      	mov	r3, r1
 8005a44:	18db      	adds	r3, r3, r3
 8005a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a48:	4613      	mov	r3, r2
 8005a4a:	eb42 0303 	adc.w	r3, r2, r3
 8005a4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a58:	f7fa fee4 	bl	8000824 <__aeabi_uldivmod>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4b61      	ldr	r3, [pc, #388]	@ (8005be8 <UART_SetConfig+0x2d4>)
 8005a62:	fba3 2302 	umull	r2, r3, r3, r2
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	011c      	lsls	r4, r3, #4
 8005a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a7c:	4642      	mov	r2, r8
 8005a7e:	464b      	mov	r3, r9
 8005a80:	1891      	adds	r1, r2, r2
 8005a82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a84:	415b      	adcs	r3, r3
 8005a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a8c:	4641      	mov	r1, r8
 8005a8e:	eb12 0a01 	adds.w	sl, r2, r1
 8005a92:	4649      	mov	r1, r9
 8005a94:	eb43 0b01 	adc.w	fp, r3, r1
 8005a98:	f04f 0200 	mov.w	r2, #0
 8005a9c:	f04f 0300 	mov.w	r3, #0
 8005aa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005aa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005aa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aac:	4692      	mov	sl, r2
 8005aae:	469b      	mov	fp, r3
 8005ab0:	4643      	mov	r3, r8
 8005ab2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005aba:	464b      	mov	r3, r9
 8005abc:	eb4b 0303 	adc.w	r3, fp, r3
 8005ac0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ad0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ad4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	18db      	adds	r3, r3, r3
 8005adc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ade:	4613      	mov	r3, r2
 8005ae0:	eb42 0303 	adc.w	r3, r2, r3
 8005ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ae6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005aea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005aee:	f7fa fe99 	bl	8000824 <__aeabi_uldivmod>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4611      	mov	r1, r2
 8005af8:	4b3b      	ldr	r3, [pc, #236]	@ (8005be8 <UART_SetConfig+0x2d4>)
 8005afa:	fba3 2301 	umull	r2, r3, r3, r1
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	2264      	movs	r2, #100	@ 0x64
 8005b02:	fb02 f303 	mul.w	r3, r2, r3
 8005b06:	1acb      	subs	r3, r1, r3
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b0e:	4b36      	ldr	r3, [pc, #216]	@ (8005be8 <UART_SetConfig+0x2d4>)
 8005b10:	fba3 2302 	umull	r2, r3, r3, r2
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b1c:	441c      	add	r4, r3
 8005b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b30:	4642      	mov	r2, r8
 8005b32:	464b      	mov	r3, r9
 8005b34:	1891      	adds	r1, r2, r2
 8005b36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b38:	415b      	adcs	r3, r3
 8005b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b40:	4641      	mov	r1, r8
 8005b42:	1851      	adds	r1, r2, r1
 8005b44:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b46:	4649      	mov	r1, r9
 8005b48:	414b      	adcs	r3, r1
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b58:	4659      	mov	r1, fp
 8005b5a:	00cb      	lsls	r3, r1, #3
 8005b5c:	4651      	mov	r1, sl
 8005b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b62:	4651      	mov	r1, sl
 8005b64:	00ca      	lsls	r2, r1, #3
 8005b66:	4610      	mov	r0, r2
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	4642      	mov	r2, r8
 8005b6e:	189b      	adds	r3, r3, r2
 8005b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b74:	464b      	mov	r3, r9
 8005b76:	460a      	mov	r2, r1
 8005b78:	eb42 0303 	adc.w	r3, r2, r3
 8005b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b94:	460b      	mov	r3, r1
 8005b96:	18db      	adds	r3, r3, r3
 8005b98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ba2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ba6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005baa:	f7fa fe3b 	bl	8000824 <__aeabi_uldivmod>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <UART_SetConfig+0x2d4>)
 8005bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	2164      	movs	r1, #100	@ 0x64
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	3332      	adds	r3, #50	@ 0x32
 8005bc6:	4a08      	ldr	r2, [pc, #32]	@ (8005be8 <UART_SetConfig+0x2d4>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	f003 0207 	and.w	r2, r3, #7
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4422      	add	r2, r4
 8005bda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bdc:	e106      	b.n	8005dec <UART_SetConfig+0x4d8>
 8005bde:	bf00      	nop
 8005be0:	40011000 	.word	0x40011000
 8005be4:	40011400 	.word	0x40011400
 8005be8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bf6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bfe:	4642      	mov	r2, r8
 8005c00:	464b      	mov	r3, r9
 8005c02:	1891      	adds	r1, r2, r2
 8005c04:	6239      	str	r1, [r7, #32]
 8005c06:	415b      	adcs	r3, r3
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c0e:	4641      	mov	r1, r8
 8005c10:	1854      	adds	r4, r2, r1
 8005c12:	4649      	mov	r1, r9
 8005c14:	eb43 0501 	adc.w	r5, r3, r1
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	00eb      	lsls	r3, r5, #3
 8005c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c26:	00e2      	lsls	r2, r4, #3
 8005c28:	4614      	mov	r4, r2
 8005c2a:	461d      	mov	r5, r3
 8005c2c:	4643      	mov	r3, r8
 8005c2e:	18e3      	adds	r3, r4, r3
 8005c30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c34:	464b      	mov	r3, r9
 8005c36:	eb45 0303 	adc.w	r3, r5, r3
 8005c3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	008b      	lsls	r3, r1, #2
 8005c5e:	4621      	mov	r1, r4
 8005c60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c64:	4621      	mov	r1, r4
 8005c66:	008a      	lsls	r2, r1, #2
 8005c68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c6c:	f7fa fdda 	bl	8000824 <__aeabi_uldivmod>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4b60      	ldr	r3, [pc, #384]	@ (8005df8 <UART_SetConfig+0x4e4>)
 8005c76:	fba3 2302 	umull	r2, r3, r3, r2
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	011c      	lsls	r4, r3, #4
 8005c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c90:	4642      	mov	r2, r8
 8005c92:	464b      	mov	r3, r9
 8005c94:	1891      	adds	r1, r2, r2
 8005c96:	61b9      	str	r1, [r7, #24]
 8005c98:	415b      	adcs	r3, r3
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ca0:	4641      	mov	r1, r8
 8005ca2:	1851      	adds	r1, r2, r1
 8005ca4:	6139      	str	r1, [r7, #16]
 8005ca6:	4649      	mov	r1, r9
 8005ca8:	414b      	adcs	r3, r1
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	f04f 0200 	mov.w	r2, #0
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cb8:	4659      	mov	r1, fp
 8005cba:	00cb      	lsls	r3, r1, #3
 8005cbc:	4651      	mov	r1, sl
 8005cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cc2:	4651      	mov	r1, sl
 8005cc4:	00ca      	lsls	r2, r1, #3
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4642      	mov	r2, r8
 8005cce:	189b      	adds	r3, r3, r2
 8005cd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	460a      	mov	r2, r1
 8005cd8:	eb42 0303 	adc.w	r3, r2, r3
 8005cdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005cf8:	4649      	mov	r1, r9
 8005cfa:	008b      	lsls	r3, r1, #2
 8005cfc:	4641      	mov	r1, r8
 8005cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d02:	4641      	mov	r1, r8
 8005d04:	008a      	lsls	r2, r1, #2
 8005d06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d0a:	f7fa fd8b 	bl	8000824 <__aeabi_uldivmod>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	4611      	mov	r1, r2
 8005d14:	4b38      	ldr	r3, [pc, #224]	@ (8005df8 <UART_SetConfig+0x4e4>)
 8005d16:	fba3 2301 	umull	r2, r3, r3, r1
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	2264      	movs	r2, #100	@ 0x64
 8005d1e:	fb02 f303 	mul.w	r3, r2, r3
 8005d22:	1acb      	subs	r3, r1, r3
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	3332      	adds	r3, #50	@ 0x32
 8005d28:	4a33      	ldr	r2, [pc, #204]	@ (8005df8 <UART_SetConfig+0x4e4>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d34:	441c      	add	r4, r3
 8005d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d44:	4642      	mov	r2, r8
 8005d46:	464b      	mov	r3, r9
 8005d48:	1891      	adds	r1, r2, r2
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	415b      	adcs	r3, r3
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d54:	4641      	mov	r1, r8
 8005d56:	1851      	adds	r1, r2, r1
 8005d58:	6039      	str	r1, [r7, #0]
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	414b      	adcs	r3, r1
 8005d5e:	607b      	str	r3, [r7, #4]
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	f04f 0300 	mov.w	r3, #0
 8005d68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d6c:	4659      	mov	r1, fp
 8005d6e:	00cb      	lsls	r3, r1, #3
 8005d70:	4651      	mov	r1, sl
 8005d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d76:	4651      	mov	r1, sl
 8005d78:	00ca      	lsls	r2, r1, #3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4603      	mov	r3, r0
 8005d80:	4642      	mov	r2, r8
 8005d82:	189b      	adds	r3, r3, r2
 8005d84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d86:	464b      	mov	r3, r9
 8005d88:	460a      	mov	r2, r1
 8005d8a:	eb42 0303 	adc.w	r3, r2, r3
 8005d8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005da8:	4649      	mov	r1, r9
 8005daa:	008b      	lsls	r3, r1, #2
 8005dac:	4641      	mov	r1, r8
 8005dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005db2:	4641      	mov	r1, r8
 8005db4:	008a      	lsls	r2, r1, #2
 8005db6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005dba:	f7fa fd33 	bl	8000824 <__aeabi_uldivmod>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005df8 <UART_SetConfig+0x4e4>)
 8005dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	2164      	movs	r1, #100	@ 0x64
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	3332      	adds	r3, #50	@ 0x32
 8005dd6:	4a08      	ldr	r2, [pc, #32]	@ (8005df8 <UART_SetConfig+0x4e4>)
 8005dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	f003 020f 	and.w	r2, r3, #15
 8005de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4422      	add	r2, r4
 8005dea:	609a      	str	r2, [r3, #8]
}
 8005dec:	bf00      	nop
 8005dee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005df2:	46bd      	mov	sp, r7
 8005df4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005df8:	51eb851f 	.word	0x51eb851f

08005dfc <arm_biquad_cascade_df2T_f32>:
 8005dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e00:	7807      	ldrb	r7, [r0, #0]
 8005e02:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 8005e06:	6885      	ldr	r5, [r0, #8]
 8005e08:	3514      	adds	r5, #20
 8005e0a:	6846      	ldr	r6, [r0, #4]
 8005e0c:	3608      	adds	r6, #8
 8005e0e:	ea4f 198e 	mov.w	r9, lr, lsl #6
 8005e12:	eb02 0b09 	add.w	fp, r2, r9
 8005e16:	f003 080f 	and.w	r8, r3, #15
 8005e1a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8005e1e:	ed55 7a05 	vldr	s15, [r5, #-20]	@ 0xffffffec
 8005e22:	ed15 7a04 	vldr	s14, [r5, #-16]
 8005e26:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005e2a:	ed15 6a02 	vldr	s12, [r5, #-8]
 8005e2e:	ed55 5a01 	vldr	s11, [r5, #-4]
 8005e32:	46b4      	mov	ip, r6
 8005e34:	ed56 3a02 	vldr	s7, [r6, #-8]
 8005e38:	ed16 4a01 	vldr	s8, [r6, #-4]
 8005e3c:	f1be 0f00 	cmp.w	lr, #0
 8005e40:	f000 8195 	beq.w	800616e <arm_biquad_cascade_df2T_f32+0x372>
 8005e44:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 8005e48:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8005e4c:	4674      	mov	r4, lr
 8005e4e:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 8005e52:	ee27 5a83 	vmul.f32	s10, s15, s6
 8005e56:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005e5a:	ee67 4a03 	vmul.f32	s9, s14, s6
 8005e5e:	ee34 4a84 	vadd.f32	s8, s9, s8
 8005e62:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005e66:	ee34 4a84 	vadd.f32	s8, s9, s8
 8005e6a:	ee26 3a83 	vmul.f32	s6, s13, s6
 8005e6e:	ed03 5a10 	vstr	s10, [r3, #-64]	@ 0xffffffc0
 8005e72:	ed50 3a0f 	vldr	s7, [r0, #-60]	@ 0xffffffc4
 8005e76:	ee67 4aa3 	vmul.f32	s9, s15, s7
 8005e7a:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005e7e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005e82:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005e86:	ee27 4a23 	vmul.f32	s8, s14, s7
 8005e8a:	ee35 5a04 	vadd.f32	s10, s10, s8
 8005e8e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005e92:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005e96:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8005e9a:	ed43 4a0f 	vstr	s9, [r3, #-60]	@ 0xffffffc4
 8005e9e:	ed10 4a0e 	vldr	s8, [r0, #-56]	@ 0xffffffc8
 8005ea2:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005ea6:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005eaa:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005eae:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005eb2:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005eb6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005eba:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005ebe:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005ec2:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005ec6:	ed03 5a0e 	vstr	s10, [r3, #-56]	@ 0xffffffc8
 8005eca:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 8005ece:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005ed2:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005ed6:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005eda:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005ede:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005ee2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005ee6:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005eea:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005eee:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005ef2:	ed43 4a0d 	vstr	s9, [r3, #-52]	@ 0xffffffcc
 8005ef6:	ed10 4a0c 	vldr	s8, [r0, #-48]	@ 0xffffffd0
 8005efa:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005efe:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005f02:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005f06:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f0a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f0e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f12:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005f16:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005f1a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f1e:	ed03 5a0c 	vstr	s10, [r3, #-48]	@ 0xffffffd0
 8005f22:	ed10 4a0b 	vldr	s8, [r0, #-44]	@ 0xffffffd4
 8005f26:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005f2a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005f2e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005f32:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f36:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f3a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f3e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005f42:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005f46:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f4a:	ed43 4a0b 	vstr	s9, [r3, #-44]	@ 0xffffffd4
 8005f4e:	ed10 4a0a 	vldr	s8, [r0, #-40]	@ 0xffffffd8
 8005f52:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005f56:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005f5a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005f5e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f62:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f66:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f6a:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005f6e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005f72:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f76:	ed03 5a0a 	vstr	s10, [r3, #-40]	@ 0xffffffd8
 8005f7a:	ed10 4a09 	vldr	s8, [r0, #-36]	@ 0xffffffdc
 8005f7e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005f82:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005f86:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005f8a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f8e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f92:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f96:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005f9a:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005f9e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005fa2:	ed43 4a09 	vstr	s9, [r3, #-36]	@ 0xffffffdc
 8005fa6:	ed10 4a08 	vldr	s8, [r0, #-32]	@ 0xffffffe0
 8005faa:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005fae:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005fb2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005fb6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005fba:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005fbe:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005fc2:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005fc6:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005fca:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005fce:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 8005fd2:	ed10 4a07 	vldr	s8, [r0, #-28]	@ 0xffffffe4
 8005fd6:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005fda:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005fde:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005fe2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005fe6:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005fea:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005fee:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005ff2:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005ff6:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005ffa:	ed43 4a07 	vstr	s9, [r3, #-28]	@ 0xffffffe4
 8005ffe:	ed10 4a06 	vldr	s8, [r0, #-24]	@ 0xffffffe8
 8006002:	ee27 5a84 	vmul.f32	s10, s15, s8
 8006006:	ee35 5a03 	vadd.f32	s10, s10, s6
 800600a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800600e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006012:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006016:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800601a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800601e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8006022:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006026:	ed03 5a06 	vstr	s10, [r3, #-24]	@ 0xffffffe8
 800602a:	ed10 4a05 	vldr	s8, [r0, #-20]	@ 0xffffffec
 800602e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8006032:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006036:	ee25 5a85 	vmul.f32	s10, s11, s10
 800603a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800603e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006042:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006046:	ee26 3a24 	vmul.f32	s6, s12, s9
 800604a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800604e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006052:	ed43 4a05 	vstr	s9, [r3, #-20]	@ 0xffffffec
 8006056:	ed10 4a04 	vldr	s8, [r0, #-16]
 800605a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800605e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006062:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8006066:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800606a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800606e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006072:	ee26 3a05 	vmul.f32	s6, s12, s10
 8006076:	ee33 3a24 	vadd.f32	s6, s6, s9
 800607a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800607e:	ed03 5a04 	vstr	s10, [r3, #-16]
 8006082:	ed10 4a03 	vldr	s8, [r0, #-12]
 8006086:	ee67 4a84 	vmul.f32	s9, s15, s8
 800608a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800608e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006092:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006096:	ee67 3a04 	vmul.f32	s7, s14, s8
 800609a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800609e:	ee26 3a24 	vmul.f32	s6, s12, s9
 80060a2:	ee33 3a05 	vadd.f32	s6, s6, s10
 80060a6:	ee66 3a84 	vmul.f32	s7, s13, s8
 80060aa:	ed43 4a03 	vstr	s9, [r3, #-12]
 80060ae:	ed10 4a02 	vldr	s8, [r0, #-8]
 80060b2:	ee27 5a84 	vmul.f32	s10, s15, s8
 80060b6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80060ba:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80060be:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80060c2:	ee67 3a04 	vmul.f32	s7, s14, s8
 80060c6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80060ca:	ee26 3a05 	vmul.f32	s6, s12, s10
 80060ce:	ee33 3a24 	vadd.f32	s6, s6, s9
 80060d2:	ee66 3a84 	vmul.f32	s7, s13, s8
 80060d6:	ed03 5a02 	vstr	s10, [r3, #-8]
 80060da:	ed10 4a01 	vldr	s8, [r0, #-4]
 80060de:	ee67 4a84 	vmul.f32	s9, s15, s8
 80060e2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80060e6:	ee25 5a85 	vmul.f32	s10, s11, s10
 80060ea:	ee35 5a23 	vadd.f32	s10, s10, s7
 80060ee:	ee67 3a04 	vmul.f32	s7, s14, s8
 80060f2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80060f6:	ee66 3a24 	vmul.f32	s7, s12, s9
 80060fa:	ee73 3a85 	vadd.f32	s7, s7, s10
 80060fe:	ee26 5a84 	vmul.f32	s10, s13, s8
 8006102:	ee25 4aa4 	vmul.f32	s8, s11, s9
 8006106:	ee34 4a05 	vadd.f32	s8, s8, s10
 800610a:	ed43 4a01 	vstr	s9, [r3, #-4]
 800610e:	3040      	adds	r0, #64	@ 0x40
 8006110:	3340      	adds	r3, #64	@ 0x40
 8006112:	3c01      	subs	r4, #1
 8006114:	f47f ae9b 	bne.w	8005e4e <arm_biquad_cascade_df2T_f32+0x52>
 8006118:	4449      	add	r1, r9
 800611a:	465b      	mov	r3, fp
 800611c:	f1b8 0f00 	cmp.w	r8, #0
 8006120:	d019      	beq.n	8006156 <arm_biquad_cascade_df2T_f32+0x35a>
 8006122:	eb01 000a 	add.w	r0, r1, sl
 8006126:	ecf1 2a01 	vldmia	r1!, {s5}
 800612a:	ee27 3aa2 	vmul.f32	s6, s15, s5
 800612e:	ee33 3a23 	vadd.f32	s6, s6, s7
 8006132:	ee67 3a22 	vmul.f32	s7, s14, s5
 8006136:	ee33 4a84 	vadd.f32	s8, s7, s8
 800613a:	ee26 5a03 	vmul.f32	s10, s12, s6
 800613e:	ee75 3a04 	vadd.f32	s7, s10, s8
 8006142:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8006146:	ee25 4a83 	vmul.f32	s8, s11, s6
 800614a:	ee34 4a22 	vadd.f32	s8, s8, s5
 800614e:	eca3 3a01 	vstmia	r3!, {s6}
 8006152:	4281      	cmp	r1, r0
 8006154:	d1e7      	bne.n	8006126 <arm_biquad_cascade_df2T_f32+0x32a>
 8006156:	ed4c 3a02 	vstr	s7, [ip, #-8]
 800615a:	ed0c 4a01 	vstr	s8, [ip, #-4]
 800615e:	3514      	adds	r5, #20
 8006160:	3608      	adds	r6, #8
 8006162:	4611      	mov	r1, r2
 8006164:	3f01      	subs	r7, #1
 8006166:	f47f ae5a 	bne.w	8005e1e <arm_biquad_cascade_df2T_f32+0x22>
 800616a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616e:	4613      	mov	r3, r2
 8006170:	e7d4      	b.n	800611c <arm_biquad_cascade_df2T_f32+0x320>
	...

08006174 <arm_biquad_cascade_df2T_init_f32>:
 8006174:	b510      	push	{r4, lr}
 8006176:	6082      	str	r2, [r0, #8]
 8006178:	7001      	strb	r1, [r0, #0]
 800617a:	4604      	mov	r4, r0
 800617c:	00ca      	lsls	r2, r1, #3
 800617e:	4618      	mov	r0, r3
 8006180:	2100      	movs	r1, #0
 8006182:	f000 f803 	bl	800618c <memset>
 8006186:	6060      	str	r0, [r4, #4]
 8006188:	bd10      	pop	{r4, pc}
 800618a:	bf00      	nop

0800618c <memset>:
 800618c:	4402      	add	r2, r0
 800618e:	4603      	mov	r3, r0
 8006190:	4293      	cmp	r3, r2
 8006192:	d100      	bne.n	8006196 <memset+0xa>
 8006194:	4770      	bx	lr
 8006196:	f803 1b01 	strb.w	r1, [r3], #1
 800619a:	e7f9      	b.n	8006190 <memset+0x4>

0800619c <__libc_init_array>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	4d0d      	ldr	r5, [pc, #52]	@ (80061d4 <__libc_init_array+0x38>)
 80061a0:	4c0d      	ldr	r4, [pc, #52]	@ (80061d8 <__libc_init_array+0x3c>)
 80061a2:	1b64      	subs	r4, r4, r5
 80061a4:	10a4      	asrs	r4, r4, #2
 80061a6:	2600      	movs	r6, #0
 80061a8:	42a6      	cmp	r6, r4
 80061aa:	d109      	bne.n	80061c0 <__libc_init_array+0x24>
 80061ac:	4d0b      	ldr	r5, [pc, #44]	@ (80061dc <__libc_init_array+0x40>)
 80061ae:	4c0c      	ldr	r4, [pc, #48]	@ (80061e0 <__libc_init_array+0x44>)
 80061b0:	f000 f818 	bl	80061e4 <_init>
 80061b4:	1b64      	subs	r4, r4, r5
 80061b6:	10a4      	asrs	r4, r4, #2
 80061b8:	2600      	movs	r6, #0
 80061ba:	42a6      	cmp	r6, r4
 80061bc:	d105      	bne.n	80061ca <__libc_init_array+0x2e>
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c4:	4798      	blx	r3
 80061c6:	3601      	adds	r6, #1
 80061c8:	e7ee      	b.n	80061a8 <__libc_init_array+0xc>
 80061ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ce:	4798      	blx	r3
 80061d0:	3601      	adds	r6, #1
 80061d2:	e7f2      	b.n	80061ba <__libc_init_array+0x1e>
 80061d4:	08006224 	.word	0x08006224
 80061d8:	08006224 	.word	0x08006224
 80061dc:	08006224 	.word	0x08006224
 80061e0:	08006228 	.word	0x08006228

080061e4 <_init>:
 80061e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e6:	bf00      	nop
 80061e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ea:	bc08      	pop	{r3}
 80061ec:	469e      	mov	lr, r3
 80061ee:	4770      	bx	lr

080061f0 <_fini>:
 80061f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f2:	bf00      	nop
 80061f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f6:	bc08      	pop	{r3}
 80061f8:	469e      	mov	lr, r3
 80061fa:	4770      	bx	lr
